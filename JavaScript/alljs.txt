// Restricted Use License
//
// This code is provided under the following terms and conditions:
//
// 1. You are not allowed to use, copy, modify, merge, publish, distribute, sublicense, or sell copies of this code in any form, modified or unmodified, without express written permission from the author.
//
// 2. You are not allowed to use this code for any illegal or unethical purpose.
//
// 3. This license applies to all versions of the code previously released, as well as all future versions. Any prior statements made about permission given are hereby revoked.
//
// 4. This code is provided "as is", without warranty of any kind, express or implied. The author shall not be liable for any damages arising from the use of this code.
//
// By viewing this code, you agree to abide by these terms and conditions. Failure to comply with these terms may result in legal action.
//
// For inquiries regarding licensing or permission to use this code in ways not covered by this license, please contact the author at AdjusterConsole@gmail.com.

function sanitizeInput(value) {
  const tempDiv = document.createElement("div");
  tempDiv.textContent = value;
  return tempDiv.innerHTML;
}

class ColorObject {
  constructor() {
    this.background = "#324350";
    this.accent = "#7C878F";
    this.shadow1 = "#D4D7DA";
    this.shadow2 = "#1A2229";
    this.username = '';
    this.glow = "#ffffff";
    this.text = "#000000";
    this.outline = "#ffffff";
    this.hover = "#7C878F32";
    this.active = "#7C878F60";
    this.light = "#ffffff";
    this.medlight = "#c3cacf";
    this.meddark = "#a4aaae";
    this.dark = "#6d7174";
    this.lightbackground = "#B6BDC1";
  }
}

function getPicker() {
  const colorSet = JSON.parse(localStorage.getItem("colorSet1")) || new ColorObject();

  colorSet.background = sanitizeInput(document.getElementById("background-picker").value);
  colorSet.accent = sanitizeInput(document.getElementById("accent-picker").value);
  colorSet.shadow1 = sanitizeInput(document.getElementById("shad1-picker").value);
  colorSet.shadow2 = sanitizeInput(document.getElementById("shad2-picker").value);
  colorSet.username = sanitizeInput(document.getElementById("userName").value);
  colorSet.glow = sanitizeInput(document.getElementById("nameGlow").value);
  colorSet.text = sanitizeInput(document.getElementById("nameColor").value);
  colorSet.outline = sanitizeInput(document.getElementById("outlineColor").value);

  localStorage.setItem("colorSet1", JSON.stringify(colorSet));
}

function setPicker() {
  const colorSet = JSON.parse(localStorage.getItem("colorSet1")) || new ColorObject();

  document.getElementById("background-picker").value = colorSet.background;
  document.getElementById("accent-picker").value = colorSet.accent;
  document.getElementById("shad1-picker").value = colorSet.shadow1;
  document.getElementById("shad2-picker").value = colorSet.shadow2;
  document.getElementById("userName").value = colorSet.username || '';
  document.getElementById("nameGlow").value = colorSet.glow;
  document.getElementById("nameColor").value = colorSet.text;
  document.getElementById("outlineColor").value = colorSet.outline;
}

function setProperty() {
  const colorSet = JSON.parse(localStorage.getItem("colorSet1")) || new ColorObject();

  document.documentElement.style.setProperty('--my-background-color', colorSet.background);
  document.documentElement.style.setProperty('--my-accent-color', colorSet.accent);
  document.documentElement.style.setProperty('--my-shadow-color1', colorSet.shadow1);
  document.documentElement.style.setProperty('--my-shadow-color2', colorSet.shadow2);
  document.documentElement.style.setProperty('--my-glow-color', colorSet.glow);
  document.documentElement.style.setProperty('--glow-txt-color', colorSet.text);
  document.documentElement.style.setProperty('--glow-outline-color', colorSet.outline);
  document.documentElement.style.setProperty('--hover-color', colorSet.hover);
  document.documentElement.style.setProperty('--active-color', colorSet.active);
  document.documentElement.style.setProperty('--fancy-light', colorSet.light);
  document.documentElement.style.setProperty('--fancy-medlight', colorSet.medlight);
  document.documentElement.style.setProperty('--fancy-meddark', colorSet.meddark);
  document.documentElement.style.setProperty('--fancy-dark', colorSet.dark);
  document.documentElement.style.setProperty('--fancy-background', colorSet.lightbackground);

  if (colorSet.username) {
    document.getElementById("userName").value = colorSet.username;
    document.getElementById("glowDiv").innerHTML = sanitizeInput(colorSet.username);
  }
}

function setColor(colors) {
  const colorSet = new ColorObject();
  switch (colors) {
    case "default":
      Object.assign(colorSet, {
        background: "#324350",
        accent: "#7C878F",
        shadow1: "#D4D7DA",
        shadow2: "#1A2229",
        glow: "#ffffff",
        text: "#000000",
        outline: "#FFFFFF",
        hover: "#7C878F32",
        active: "#7C878F60",
        light: "#ffffff",
        medlight: "#c3cacf",
        meddark: "#a4aaae",
        dark: "#6d7174",
        lightbackground: "#B6BDC1"
      });
      break;
    case "grey":
      Object.assign(colorSet, {
        background: "#4f4f4f",
        accent: "#707070",
        shadow1: "#cecece",
        shadow2: "#141414",
        glow: "#ffffff",
        text: "#000000",
        outline: "#ffffff",
        hover: "#70707032",
        active: "#70707060",
        light: "#fafafa",
        medlight: "#cccccc",
        meddark: "#acacac",
        dark: "#848484",
        lightbackground: "#bfbfbf"
      });
      break;
    case "red":
      Object.assign(colorSet, {
        background: "#622823",
        accent: "#81524E",
        shadow1: "#CFBEBD",
        shadow2: "#130807",
        glow: "#ffffff",
        text: "#000000",
        outline: "#2f9844",
        hover: "#81524E32",
        active: "#81524E60",
        light: "#fafafa",
        medlight: "#cccccc",
        meddark: "#acacac",
        dark: "#848484",
        lightbackground: "#bfbfbf"
      });
      break;
    case "green":
      Object.assign(colorSet, {
        background: "#2f9844",
        accent: "#58ac69",
        shadow1: "#c0e0c6",
        shadow2: "#040f06",
        glow: "#ffffff",
        text: "#98422f",
        outline: "#98422f",
        hover: "#58ac6932",
        active: "#58ac6960",
        light: "#fafafa",
        medlight: "#cccccc",
        meddark: "#acacac",
        dark: "#848484",
        lightbackground: "#bfbfbf"
      });
      break;
  }
  localStorage.setItem("colorSet1", JSON.stringify(colorSet));
  setPicker();
  setProperty();
}

function personalize() {
  MENU();
  document.getElementById("appearDiv").style.display = "inline-block";
}

function exitColor() {
  document.getElementById("appearDiv").style.display = "none";
  location.reload();
}

function saveColors() {
  getPicker();
  setProperty();
  exitColor();
}

function resetColors() {
  if (!localStorage.getItem("colorSet1")) {
    setColor("default");
  } else {
    const colorSet = JSON.parse(localStorage.getItem("colorSet1")) || new ColorObject();
    setPicker();
    setProperty();
  }
}
// Restricted Use License
//
// This code is provided under the following terms and conditions:
//
// 1. You are not allowed to use, copy, modify, merge, publish, distribute, sublicense, or sell copies of this code in any form, modified or unmodified, without express written permission from the author.
//
// 2. You are not allowed to use this code for any illegal or unethical purpose.
//
// 3. This license applies to all versions of the code previously released, as well as all future versions. Any prior statements made about permission given are hereby revoked.
//
// 4. This code is provided "as is", without warranty of any kind, express or implied. The author shall not be liable for any damages arising from the use of this code.
//
// By viewing this code, you agree to abide by these terms and conditions. Failure to comply with these terms may result in legal action.
//
// For inquiries regarding licensing or permission to use this code in ways not covered by this license, please contact the author at AdjusterConsole@gmail.com.

function colorObject() {
  this.background = "#2d4252";
  this.accent = "#7c878f";
  this.shadow1 = "#688da6";
  this.shadow2 = "#1c2a35";
  this.shadow3 = "#425e70";
  this.shadow4 = "#0e1315";
  this.username = '';
  this.glow = "#ffffff";
  this.text = "#ffffff";
  this.outline = "#000000";
  this.hover = "#7C878F32";
  this.active = "#7C878F60";
  this.light = "#ffffff";
  this.medlight = "#c3cacf";
  this.meddark = "#a4aaae";
  this.dark = "#6d7174";
  this.lightbackground = "#B6BDC1";
}

function sanitizeInput(value) {
  const tempDiv = document.createElement("div");
  tempDiv.textContent = value;
  return tempDiv.innerHTML;
}

function getPicker() {
  const colorSet = JSON.parse(localStorage.getItem("colorSet2")) || {};

  colorSet.background = sanitizeInput(document.getElementById("background-picker").value);
  colorSet.accent = sanitizeInput(document.getElementById("accent-picker").value);
  colorSet.shadow1 = sanitizeInput(document.getElementById("shad1-picker").value);
  colorSet.shadow2 = sanitizeInput(document.getElementById("shad2-picker").value);
  colorSet.shadow3 = sanitizeInput(document.getElementById("shad3-picker").value);
  colorSet.shadow4 = sanitizeInput(document.getElementById("shad4-picker").value);
  colorSet.username = sanitizeInput(document.getElementById("userName").value);
  colorSet.glow = sanitizeInput(document.getElementById("nameGlow").value);
  colorSet.text = sanitizeInput(document.getElementById("nameColor").value);
  colorSet.outline = sanitizeInput(document.getElementById("outlineColor").value);
  colorSet.light = sanitizeInput(document.getElementById("fl-picker").value);
  colorSet.medlight = sanitizeInput(document.getElementById("ml-picker").value);
  colorSet.meddark = sanitizeInput(document.getElementById("md-picker").value);
  colorSet.dark = sanitizeInput(document.getElementById("fd-picker").value);
  colorSet.lightbackground = sanitizeInput(document.getElementById("bg2-picker").value);

  localStorage.setItem("colorSet2", JSON.stringify(colorSet));
}

function setPicker() {
  const colorSet = JSON.parse(localStorage.getItem("colorSet2")) || {};

  document.getElementById("background-picker").value = colorSet.background || '';
  document.getElementById("accent-picker").value = colorSet.accent || '';
  document.getElementById("shad1-picker").value = colorSet.shadow1 || '';
  document.getElementById("shad2-picker").value = colorSet.shadow2 || '';
  document.getElementById("shad3-picker").value = colorSet.shadow3 || '';
  document.getElementById("shad4-picker").value = colorSet.shadow4 || '';
  if (colorSet.username != null) {
    document.getElementById("userName").value = colorSet.username;
  }
  document.getElementById("nameGlow").value = colorSet.glow || '';
  document.getElementById("nameColor").value = colorSet.text || '';
  document.getElementById("outlineColor").value = colorSet.outline || '';
  document.getElementById("fl-picker").value = colorSet.light || '';
  document.getElementById("ml-picker").value = colorSet.medlight || '';
  document.getElementById("md-picker").value = colorSet.meddark || '';
  document.getElementById("fd-picker").value = colorSet.dark || '';
  document.getElementById("bg2-picker").value = colorSet.lightbackground || '';
}

function setProperty() {
  const colorSet = JSON.parse(localStorage.getItem("colorSet2")) || {};

  document.documentElement.style.setProperty('--my-background-color', colorSet.background || '');
  document.documentElement.style.setProperty('--my-accent-color', colorSet.accent || '');
  document.documentElement.style.setProperty('--my-shadow-color1', colorSet.shadow1 || '');
  document.documentElement.style.setProperty('--my-shadow-color2', colorSet.shadow2 || '');
  document.documentElement.style.setProperty('--my-shadow-color3', colorSet.shadow3 || '');
  document.documentElement.style.setProperty('--my-shadow-color4', colorSet.shadow4 || '');
  document.documentElement.style.setProperty('--my-glow-color', colorSet.glow || '');
  document.documentElement.style.setProperty('--glow-txt-color', colorSet.text || '');
  document.documentElement.style.setProperty('--glow-outline-color', colorSet.outline || '');
  document.documentElement.style.setProperty('--hover-color', colorSet.hover || '');
  document.documentElement.style.setProperty('--active-color', colorSet.active || '');
  document.documentElement.style.setProperty('--fancy-light', colorSet.light || '');
  document.documentElement.style.setProperty('--fancy-medlight', colorSet.medlight || '');
  document.documentElement.style.setProperty('--fancy-meddark', colorSet.meddark || '');
  document.documentElement.style.setProperty('--fancy-dark', colorSet.dark || '');
  document.documentElement.style.setProperty('--fancy-background', colorSet.lightbackground || '');

  if (colorSet.username != null) {
    document.getElementById("userName").value = colorSet.username;
    document.getElementById("glowDiv").innerHTML = sanitizeInput(colorSet.username);
  }
}

function setColor(colors) {
  const colorSet = new colorObject();

  switch (colors) {
    case "default":
      Object.assign(colorSet, {
        background: "#2d4252",
        accent: "#7c878f",
        shadow1: "#68869c",
        shadow2: "#1c2a35",
        shadow3: "#425e70",
        shadow4: "#0e1315",
        glow: "#ffffff",
        text: "#ffffff",
        outline: "#000000",
        hover: "#7C878F32",
        active: "#7C878F60",
        light: "#ffffff",
        medlight: "#c3cacf",
        meddark: "#a4aaae",
        dark: "#6d7174",
        lightbackground: "#B6BDC1"
      });
      break;
    case "grey":
      Object.assign(colorSet, {
        background: "#4f4f4f",
        accent: "#707070",
        shadow1: "#7e7e7e",
        shadow2: "#555555",
        shadow3: "#474747",
        shadow4: "#202020",
        glow: "#ffffff",
        text: "#000000",
        outline: "#ffffff",
        hover: "#70707032",
        active: "#70707060",
        light: "#ffffff",
        medlight: "#cccccc",
        meddark: "#acacac",
        dark: "#737373",
        lightbackground: "#bfbfbf"
      });
      break;
    case "red":
      Object.assign(colorSet, {
        background: "#622823",
        accent: "#81524E",
        shadow1: "#9d4038",
        shadow2: "#692b25",
        shadow3: "#582420",
        shadow4: "#27100e",
        glow: "#ffffff",
        text: "#000000",
        outline: "#ffffff",
        hover: "#81524E32",
        active: "#81524E60",
        light: "#ffffff",
        medlight: "#ffdada",
        meddark: "#e6b8b8",
        dark: "#997a7a",
        lightbackground: "#ffcccc"
      });
      break;
    case "green":
      Object.assign(colorSet, {
        background: "#2f9844",
        accent: "#58ac69",
        shadow1: "#4bf36d",
        shadow2: "#32a349",
        shadow3: "#2a893d",
        shadow4: "#133d1b",
        glow: "#E3FFE4",
        text: "#000000",
        outline: "#FFFFFF",
        hover: "#58ac6932",
        active: "#58ac6960",
        light: "#ffffff",
        medlight: "#e3ffe4",
        meddark: "#bfdac0",
        dark: "#7f9180",
        lightbackground: "#c5edc6"
      });
      break;
    case "pink":
      Object.assign(colorSet, {
        background: "#d585d3",
        accent: "#330031",
        shadow1: "#ffb9ff",
        shadow2: "#ed9deb",
        shadow3: "#bd6dbb",
        shadow4: "#a14b9f",
        glow: "#FFFFFF",
        text: "#FFFFFF",
        outline: "#000000",
        hover: "#33003132",
        active: "#33003160",
        light: "#ffdaff",
        medlight: "#ffcbff",
        meddark: "#eda7ed",
        dark: "#de98de",
        lightbackground: "#ffb9ff"
      });
      break;
  }

  localStorage.setItem("colorSet2", JSON.stringify(colorSet));
  setPicker();
  setProperty();
}

function personalize() {
  MENU();
  document.getElementById("appearDiv").style.display = "inline-block";
}

function exitColor() {
  document.getElementById("appearDiv").style.display = "none";
  location.reload();
}

function saveColors() {
  getPicker();
  setProperty();
  exitColor();
}

function resetColors() {
  if (localStorage.getItem("colorSet2") === null) {
    setColor("default");
  } else {
    const colorSet = JSON.parse(localStorage.getItem("colorSet2"));
    setPicker();
    setProperty();
  }
}
//Restricted Use License
//
//This code is provided under the following terms and conditions:
//
//1. You are not allowed to use, copy, modify, merge, publish, distribute, sublicense, or sell copies of this code in any form, modified or unmodified, without express written permission from the author.
//
//2. You are not allowed to use this code for any illegal or unethical purpose.
//
//3. This license applies to all versions of the code previously released, as well as all future versions. Any prior statements made about permission given are hereby revoked.
//
//4. This code is provided "as is", without warranty of any kind, express or implied. The author shall not be liable for any damages arising from the use of this code.
//
//By using this code, you agree to abide by these terms and conditions. Failure to comply with these terms may result in legal action.
//
//For inquiries regarding licensing or permission to use this code in ways not covered by this license, please contact the author at AdjusterConsole@gmail.com.


function openInfo2(evt, cityName) {
  let i, diagcontent, tablinks2;
  diagcontent = document.getElementsByClassName("diagcontent");
  for (i = 0; i < diagcontent.length; i++) {
    diagcontent[i].style.display = "none";
  }
  tablinks2 = document.getElementsByClassName("tablinks2");
  for (i = 0; i < tablinks2.length; i++) {
    tablinks2[i].className = tablinks2[i].className.replace(" active", "");
  }
  document.getElementById(cityName).style.display = "block";
  evt.currentTarget.className += " active";
}

function closeResource2() {
  let i, diagcontent, tablinks2;
  diagcontent = document.getElementsByClassName("diagcontent");
  for (i = 0; i < diagcontent.length; i++) {
    diagcontent[i].style.display = "none";
  }
  tablinks2 = document.getElementsByClassName("tablinks2");
  for (i = 0; i < tablinks2.length; i++) {
    tablinks2[i].className = tablinks2[i].className.replace(" active", "");
  }
 document.getElementById('diagDiv').style.display = "none";
}

function diagCenter() {
  let diagDiv = document.getElementById("diagDiv");
  if (diagDiv.style.display == "none" && !checkOpen()) {
    diagDiv.style.display = "block";
    let widthpre = parseInt(window.getComputedStyle(diagDiv).width);
    let width1 = (widthpre / 4);
    let width = width1.toString() + "px";
    document.documentElement.style.setProperty('--div-width2', width);
  } else {
    diagDiv.style.display = "none";
  }
}

function magnify(image) {
  let lastImageId = localStorage.getItem("lastImageId");
  if (image == 'back') {
    document.getElementById(lastImageId).style.display = "none";
    document.getElementById('theDepot').style.display = "none";
    localStorage.removeItem("lastImageId");
  } else {
    let imageId = image + "Depot";
    localStorage.setItem("lastImageId", imageId);
    document.getElementById(imageId).style.display = "block";
    document.getElementById('theDepot').style.display = "inline-block";
  }
}

function diagAction(action) {
  let textarea = "";
  let diagcontent, whichDivId, whichIptclass, textAreaid, notetextArea, i, tableTHs, tableTDs, table;
  diagcontent = document.getElementsByClassName("diagcontent");
  for (i = 0; i < diagcontent.length; i++) {
    if (diagcontent[i].style.display === "block") {
      whichDivId = diagcontent[i].id;
    }
  }
  whichTblid = whichDivId + "in";
  table = document.getElementById(whichTblid);
  tableTDs = table.getElementsByTagName("td");
  tableTHs = table.getElementsByTagName("th");

  for (i = 0; i < tableTDs.length; i++) {
    if (action == 'clear') {
      tableTDs[i].innerText = "";
    }
    if (action == 'copy') {
      textarea += tableTHs[i].innerText + ": " + tableTDs[i].innerText + "\r";
    }
  }
  textAreaid = whichDivId + "TA";
  notetextArea = document.getElementById(textAreaid);
  if (action == 'clear') {
    notetextArea.value = "";
  }
  if (action == 'copy') {
    textarea += "\rNotes:\r" + notetextArea.value;
    copy(textarea);
  }
}

//                                                                      RESOURCE DIV

function openInfo(evt, cityName) {
  let i, tabcontent, tablinks;
  tabcontent = document.getElementsByClassName("tabcontent");
  for (i = 0; i < tabcontent.length; i++) {
    tabcontent[i].style.display = "none";
  }
  tablinks = document.getElementsByClassName("tablinks");
  for (i = 0; i < tablinks.length; i++) {
    tablinks[i].className = tablinks[i].className.replace(" active", "");
  }
  document.getElementById(cityName).style.display = "block";
  evt.currentTarget.className += " active";
  setDate();
    for (let i = 0; i < 6; i++) {
      let elemId = "rec" + i;
      localStorage.removeItem(elemId + "Note");
      document.getElementById(elemId + "Notebin").innerText = "";
    }
  localStorage.removeItem("incNote");
  document.getElementById("incNotebin").innerText = "";
  localStorage.removeItem("serNote");
  document.getElementById("serNotebin").innerText = "";
}

function closeResource() {
  let i, tabcontent, tablinks;
  let noteOpen = localStorage.getItem("noteOpen");
  if (noteOpen != "false") {
    closeonFly();
  }
  tabcontent = document.getElementsByClassName("tabcontent");
  for (i = 0; i < tabcontent.length; i++) {
    tabcontent[i].style.display = "none";
  }
  tablinks = document.getElementsByClassName("tablinks");
  for (i = 0; i < tablinks.length; i++) {
    tablinks[i].className = tablinks[i].className.replace(" active", "");
  }
  document.getElementById('trackerMsg').innerText = "";
  document.getElementById('trackerMini').innerText = "";
  resetGuide();
  resrcCenter();
}

function resrcCenter(x,y) {
  let w = parseInt(x);
  let resrcDiv = document.getElementById("resrcDiv");
  if (resrcDiv.style.display == "none" && !checkOpen()) {
    resrcDiv.style.display = "inline-block";
    if (y == 'p') { document.getElementById("policyDiv").classList.remove("hide"); }
    if (y == 't') { document.getElementById("toolsDiv").classList.remove("hide"); }
    document.getElementById('trackerMsg').innerText = "";
    let widthpre = parseInt(window.getComputedStyle(resrcDiv).width);
    let width1 = (widthpre / w);
    let width = width1.toString() + "px";
    document.documentElement.style.setProperty('--div-width', width);
    return;
  }
  resrcDiv.style.display = "none";
  document.getElementById("policyDiv").classList.add("hide");
  document.getElementById("toolsDiv").classList.add("hide");
}

function Record() {
  this.date;
  this.mileage = 0;
  this.notes = "";
  this.isInception = false;
  this.correction = false;
  this.daysfrom = 0;
  this.milesfrom = 0;
  this.discrepancy = false;
  this.waitperiod = false;
  this.isService = false;
  this.isPrior = false;
}

function setDate() {
  let date = new Date();
  let day = date.getDate();
  let month = date.getMonth() + 1;
  let year = date.getFullYear();
  if (month < 10) month = "0" + month;
  if (day < 10) day = "0" + day;
  let today = year + "-" + month + "-" + day;
  document.getElementById("serDate").value = today;

//  document.getElementById("incDate").value = today;
//  document.getElementById("rec0Date").value = today;

//  document.getElementById("incDate").value = "2024-01-31";
//  document.getElementById("serDate").value = "2024-03-01";
//  document.getElementById("rec0Date").value = "2024-01-01";

//  document.getElementById("incMile").value = "104000";
//  document.getElementById("serMile").value = "110000";
//  document.getElementById("rec0Mile").value = "100000";
}

function convertToDate(str) {
  let dateArr = str.split("-");
  return new Date(dateArr[0], dateArr[1], dateArr[2]);
}

function dayCalc(inceptDate, recordDate) {
  let incDate = convertToDate(inceptDate);
  let recDate = convertToDate(recordDate);
  return Math.round((recDate.getTime() - incDate.getTime()) / 86400000);
}

function addLine() {
  document.getElementById('trackerMsg').innerText = "";
  document.getElementById('trackerMini').innerText = "";
  let addLineCount = localStorage.getItem("addLineCount");
  let lineNum = parseInt(addLineCount) + 1;
  if (lineNum < 6) {
    let nextId = "recTab" + lineNum.toString();
    document.getElementById(nextId).style.visibility = "visible";
    localStorage.setItem("addLineCount", lineNum);
  } else { return; }
}

function isitOlder(isOlder, thanThis) {
  let isOlder1 = convertToDate(isOlder);
  let thanThis1 = convertToDate(thanThis);
  if (isOlder1.getTime() > thanThis1.getTime()) {
    return true;
  } else {
    return false;
  }
}

function compare (rec1, rec2) {
  return rec1.mileage - rec2.mileage;
}

function isitWP(record) {
  if (record.isService) {
    if (record.daysfrom < 26) {
      return true;
    }
    if (record.milesfrom < 250) {
      return true;
    }
    if (record.daysfrom < 41 && record.milesfrom < 500) {
      return true;
    }
  }
}

function hideTable() {
  let tableDiv = document.getElementById('tableDiv');
  tableDiv.style.opacity = "0";
}

function showTable() {
  let tableDiv = document.getElementById('tableDiv');
  tableDiv.style.opacity = "1";
}

function saveAll() {
  let noteOpen = localStorage.getItem("noteOpen");
  let addLineCount = localStorage.getItem("addLineCount");
  if (noteOpen != "false") {
    closeonFly();
  }
  saveRecord('incR');
  saveRecord('serR');
  saveRecord('rec0R');
  for (i = 0; i < addLineCount; i++) {
    let recId = "rec" + i + "R";
    saveRecord(recId);
  }
}

function saveRecord(elemId) {
  let noteOpen = localStorage.getItem("noteOpen");
  if (noteOpen != "false") {
    closeonFly();
  }
  document.getElementById('trackerMsg').innerText = "";
  document.getElementById('trackerMini').innerText = "";
  let record = new Record();
  let indexF = elemId.length - 1;
  let newelemId = elemId.slice(0, indexF);
  let checkMileage = document.getElementById(newelemId + "Mile").value;
  let checkDate = document.getElementById(newelemId + "Date").value;
  if (checkDate == null || checkMileage == "") {
    alert("Enter Date and Mileage of record to save.");
    return;
  }
  record.date = document.getElementById(newelemId + "Date").value;
  record.mileage = document.getElementById(newelemId + "Mile").value;
  record.notes = localStorage.getItem(newelemId + "Note");
  if (document.getElementById(newelemId + "C").checked && newelemId != "ser") {
    localStorage.setItem("IDforCor", newelemId);
    localStorage.setItem(newelemId + "mileage", record.mileage);
    localStorage.setItem(newelemId + "date", record.date);
  }
  if (newelemId == "ser") {
    record.isService = true;
    localStorage.setItem("sermileage", record.mileage);
    localStorage.setItem("serdate", record.date);
  }
  if (newelemId == "inc") {
    record.isInception = true;
    record.correction = false;
    record.daysfrom = 0;
    record.milesfrom = 0;
    localStorage.setItem("InceptionMiles", record.mileage);
    localStorage.setItem("InceptionDate", record.date);
  }
  if (newelemId != "inc") {
    let inceptStr = localStorage.getItem("InceptionMiles");
    if (inceptStr != null) {
      let inceptMiles = parseInt(inceptStr);
      let tempMil = record.mileage - inceptMiles;
      if (tempMil < 0) { tempMil = tempMil * -1; }
      record.milesfrom = tempMil;
      let inceptDate = localStorage.getItem("InceptionDate");
      tempdayfr = dayCalc(inceptDate, record.date);
      if (tempdayfr < 0) { tempdayfr = tempdayfr * -1; record.isPrior = true;}
      record.daysfrom = tempdayfr;
      if (isitWP(record)) { record.waitperiod = true; }
    }
  }
  let recordArr = [];
  recordArr = JSON.parse(localStorage.getItem("recordArr"));
  let objectArr = [];
  objectArr = JSON.parse(localStorage.getItem("objectArr"));
  let savedRecs = localStorage.getItem("savedRecs");
  let recIndex = 0;
  if (objectArr.length != null) {
    let recIndex = objectArr.length;
  }
  let recName = newelemId + "Rcrd";
  if (!recordArr.includes(recName)) {
    if (!objectArr.includes("empty")) {
      objectArr.push(record);
    } else {
      let indexA = objectArr.indexOf("empty");
      objectArr.splice(indexA, 1, record);
      recIndex = indexA;
    }
    recordArr.push(recName);
    localStorage.setItem(recName + "spot", recIndex);
    localStorage.setItem("objectArr", JSON.stringify(objectArr));
    localStorage.setItem("recordArr", JSON.stringify(recordArr));
    let newCount = parseInt(savedRecs) + 1;
    localStorage.setItem("savedRecs", newCount);
  } else {
    let indexSaved = localStorage.getItem(recName + "spot");
    objectArr.splice(indexSaved, 1, record);
    localStorage.setItem("objectArr", JSON.stringify(objectArr));
  }
}

function otherCalcs() {
  const objectArr = JSON.parse(localStorage.getItem("objectArr"));
  let inceptDate = localStorage.getItem("InceptionDate");
  let inceptStr = localStorage.getItem("InceptionMiles");
  if (inceptDate == null) {
    document.getElementById('trackerMsg').innerHTML += "Need Inception date to perform calculations.";
    return;
  }
  for (i = 0; i < objectArr.length; i++) {
    let record = objectArr[i];
    if (record.isInception == false && record.milesfrom == '0') {
      let inceptMiles = parseInt(inceptStr);
      let tempMil = record.mileage - inceptMiles;
      if (tempMil < 0) { tempMil = tempMil * -1; }
      record.milesfrom = tempMil;
      tempdayfr = dayCalc(inceptDate, record.date);
      if (tempdayfr < 0) { tempdayfr = tempdayfr * -1; record.isPrior = true;}
      record.daysfrom = tempdayfr;
      if (isitWP(record)) { record.waitperiod = true; }
    }
  }
  localStorage.setItem("objectArr", JSON.stringify(objectArr));
}

function delRecord(elemId) {
  let noteOpen = localStorage.getItem("noteOpen");
  if (noteOpen != "false") {
    closeonFly();
  }
  document.getElementById('trackerMsg').innerText = "";
  document.getElementById('trackerMini').innerText = "";
  let temp = elemId.length - 1;
  let newelemId = elemId.slice(0, temp);
  const recordArr = JSON.parse(localStorage.getItem("recordArr"));
  const objectArr = JSON.parse(localStorage.getItem("objectArr"));
  let recName = newelemId + "Rcrd";
  let objectIndex = localStorage.getItem(recName + "spot");
  if (recordArr.includes(recName)) {
    if (recName == "incRcrd") {
      localStorage.removeItem("InceptionMiles");
      localStorage.removeItem("InceptionDate");
    }
    localStorage.removeItem(newelemId + "Note");
    objectArr.splice(objectIndex, 1, "empty");
    localStorage.setItem("objectArr", JSON.stringify(objectArr));
    let savedRecs = localStorage.getItem("savedRecs");
    let newCount = parseInt(savedRecs) - 1;
    localStorage.setItem("savedRecs", newCount);
    localStorage.removeItem(recName);
    const index = recordArr.indexOf(recName);
    document.getElementById(newelemId + "Date").value = "";
    document.getElementById(newelemId + "Mile").value = "";
    if (index > -1) {
      recordArr.splice(index, 1);
      localStorage.setItem("recordArr", JSON.stringify(recordArr));
    }
  }
}

function whichRep() {
  const whichA = document.getElementById('whichA').checked;
  const whichB = document.getElementById('whichB').checked;
  const whichC = document.getElementById('whichC').checked;
  if (whichA && !whichB && !whichC) { comsoCompan('0'); return; }
  if (whichB && !whichA && !whichC) { inceptEst(); return; }
  if (whichC && !whichA && !whichB) { comsoCompan('1'); return; }
  if (whichA && whichB && !whichC) {
    comsoCompan('0');
    inceptEst('both');
    return;
  }
  if (whichA && whichC && !whichB) {
    comsoCompan('2');
    return;
  }
  if (whichB && whichC && !whichA) {
    comsoCompan('1');
    inceptEst('note');
    return;
  }
  if (whichA && whichB && whichC) {
    inceptEst('all');
    comsoCompan('3');
    return;
  }
}

function comsoCompan(z) {
  otherCalcs();
  let savedRecs = localStorage.getItem("savedRecs");
  let recCount = parseInt(savedRecs);
  if (recCount < 3) {
    document.getElementById('trackerMsg').innerHTML += "Enter at least 3 records to continue.";
    return;
  }
  const objectArr = JSON.parse(localStorage.getItem("objectArr"));
  objectArr.sort(compare);
  let looped = objectArr.length - 1;
  for (i = 0; i < looped; i++) {
    let x = i + 1;
    let firDate = objectArr[i].date;
    let secDate = objectArr[x].date;
    if (isitOlder(firDate, secDate)) {
      objectArr[i].discrepancy = true;
      objectArr[x].discrepancy = true;
      console.log(objectArr[i].mileage);
    }
  }
  localStorage.setItem("objectArr", JSON.stringify(objectArr));
  displayRecs(z);
}

function closeonFly() {
  let noteOpen = localStorage.getItem("noteOpen");
  let elemId = noteOpen.slice(0, -7);
  let noteID = elemId + "N";
  let binElem = document.getElementById(noteOpen);
  let noteText = binElem.innerText;
  binElem.innerText = "";
  if (noteText != "") {
    localStorage.setItem(elemId + "Note", noteText);
  }
  document.getElementById(noteID).innerText = "Add Note";
  binElem.style.height = "0px";
  binElem.classList.toggle("arise");
  localStorage.setItem("noteOpen", "false");
  noteForget();
}

function showNote(noteID) {
  let noteOpen = localStorage.getItem("noteOpen");
  let temp = noteID.length - 1;
  let elemId = noteID.slice(0, temp);
  let noteDivID = noteID + "otebin";
  let binElem = document.getElementById(noteDivID);
  if (binElem.style.height == "0px") {
    if (noteOpen != "false") {
      closeonFly();
    }
    let curNote = localStorage.getItem(elemId + "Note");
    if (curNote != null) {
      binElem.innerText = curNote;
    }
    binElem.classList.toggle("arise");
    binElem.style.height = "150px"
    document.getElementById(noteID).innerText = "Finished";
    localStorage.setItem("noteOpen", noteDivID);
    noteListen();
  } else if (binElem.style.height != "0px") {
    document.getElementById('trackerMsg').innerHTML = "";
    let noteText = binElem.innerText;
    binElem.innerText = "";
    if (noteText != "") {
      localStorage.setItem(elemId + "Note", noteText);
    }
    document.getElementById(noteID).innerText = "Add Note";
    binElem.style.height = "0px";
    binElem.classList.toggle("arise");
    localStorage.setItem("noteOpen", "false");
    noteForget();
  }
}

function noteListen() {
  const notebins = ["incNotebin", "serNotebin", "rec0Notebin", "rec1Notebin", "rec2Notebin", "rec3Notebin", "rec4Notebin", "rec5Notebin"];
  notebins.forEach(id => {
    const element = document.getElementById(id);
    if (element) {
      element.addEventListener("keydown", addListen);
    }
  });
}

function noteForget() {
  const notebins = ["incNotebin", "serNotebin", "rec0Notebin", "rec1Notebin", "rec2Notebin", "rec3Notebin", "rec4Notebin", "rec5Notebin"];
  notebins.forEach(id => {
    const element = document.getElementById(id);
    if (element) {
      element.removeEventListener("keydown", addListen);
    }
  });
}


function addListen(event) {
  if (event.key === "Enter") {
    event.preventDefault();
    document.execCommand("insertLineBreak");
  }
}

function displayRecs(z) {
  if (document.getElementById('reportTable') != null) {
    document.getElementById('outputDiv').removeChild(document.getElementById('reportTable'));
    document.getElementById('msgDiv').innerHTML = "";
    document.getElementById('alertDiv').innerHTML += "";
  }
  const objectArr = JSON.parse(localStorage.getItem("objectArr"));
  const table = document.createElement('table');
  table.classList.add('TheOutputtable');
  table.id = "reportTable";
  const header = table.createTHead().insertRow();
  header.classList.add('headit');
  header.insertCell(0).innerText = "Date";
  header.insertCell(1).innerText = "Mileage";
  header.insertCell(2).innerText = "Miles";
  header.insertCell(3).innerText = "Days";
  header.insertCell(4).innerText = "M/D";
  header.insertCell(5).innerText = "WP";
  header.insertCell(6).innerText = "DIS";
  header.insertCell(7).innerText = "Notes";
  const body = document.createElement('tbody');
  table.appendChild(body);
  let EIC = false;
  let waitPeriod = false;
  let HMPD = false;
  let mileDis = false;
  let hasMessage = false;
  let displayMessage = false;
  for (i = 0; i < objectArr.length; i++) {
    const row = body.insertRow();
    row.classList.add('rowit');
    let tempRec = objectArr[i];
    let dateStr = tempRec.date;
    let year = dateStr.substr(0,4);
    let month = dateStr.substr(5,2);
    let day = dateStr.substr(8,2);
    let milesper;
    let distance;
    let overTime;
    let outputDate = month + "-" + day + "-" + year;
    tempRec.date = outputDate;
    if (!tempRec.isInception) {
      distance = parseInt(tempRec.milesfrom);
      overTime = parseInt(tempRec.daysfrom);
      milesper = Math.round(distance / overTime);
    } else {
      milesper = 0;
    }
    row.insertCell(0).innerText = outputDate;
    row.insertCell(1).innerText = tempRec.mileage;
    row.insertCell(2).innerText = tempRec.milesfrom;
    row.insertCell(3).innerText = tempRec.daysfrom;
    row.insertCell(4).innerText = milesper;
    if (tempRec.waitperiod) {
      row.insertCell(5).innerText = "\u26D4";
    } else {
      row.insertCell(5).innerText = "\u2714";
    }
    if (tempRec.discrepancy) {
      row.insertCell(6).innerText = "\u26D4";
    } else {
      row.insertCell(6).innerText = "\u2714";
    }
    if (tempRec.notes != null) {
      row.insertCell(7).innerText = "True";
    } else {
      row.insertCell(7).innerText = "False";
    }
    document.getElementById('outputDiv').appendChild(table);
    if (tempRec.isService) {
      if (overTime < 90 || distance < 700) {
        document.getElementById('alertDiv').innerHTML += "\u2757 ALERT: EARLY IN COVERAGE \u2757<br>";
        hasMessage = true;
        EIC = true;
      }
    }
    if (tempRec.waitperiod && !waitPeriod) {
      document.getElementById('alertDiv').innerHTML += "\u2757 ALERT: WAITING PERIOD \u2757<br>";
      hasMessage = true;
      waitPeriod = true;
    }
    if (tempRec.discrepancy && !mileDis) {
      document.getElementById('alertDiv').innerHTML += "\u2757 ALERT: MILEAGE DISCREPANCY \u2757<br>";
      hasMessage = true;
      mileDis = true;
    }
    if (milesper > 200 && !HMPD) {
      document.getElementById('alertDiv').innerHTML += "\u2757 ALERT: HMPD \u2757<br>";
      hasMessage = true;
      HMPD = true;
    }
    if (z == '0' || z == '2' || z == '3') {
      displayOutput();
      if (hasMessage && !displayMessage) {
        let currentAlert = document.getElementById('alertDiv').innerHTML;
        displayMessage = true;
      }
    }
  }
  let allCells = document.getElementsByTagName("td");
  for (i = 0; i < allCells.length; i++) {
    if (allCells[i].innerText == "\u2714") {
      allCells[i].style.color = "green";
    }
  }
  priorMileage();
  if (z == '1' || z == '2' || z == '3') {
    noteOutput(z);
    return;
  }
}

function priorMileage() {
  const table = document.querySelector(".TheOutputtable");
  const objectArr = JSON.parse(localStorage.getItem("objectArr"));
  for (i = 0; i < objectArr.length; i++) {
    if(objectArr[i].isPrior) {
      let x = i + 1;
      table.rows[x].cells[2].style.color = "red";
      table.rows[x].cells[3].style.color = "red";
    }
  }
}

function showMsg() {
  document.getElementById('msgDiv').style.opacity = 1;
}

function inceptEst(spot) {
  document.getElementById('trackerMsg').innerHTML = "";
  document.getElementById('trackerMini').innerHTML = "";
  let elemId = localStorage.getItem("IDforCor");
  let recMileage1 = localStorage.getItem(elemId + "mileage");
  let recDate = localStorage.getItem(elemId + "date");
  let serMileage1 = localStorage.getItem("sermileage");
  let serDate = localStorage.getItem("serdate");
  let incMileage1 = localStorage.getItem("InceptionMiles");
  let incDate = localStorage.getItem("InceptionDate");
  if (elemId == null || recMileage1 == null || recDate == null || serMileage1 == null || serDate == null || incMileage1 == null || incDate == null) {
    document.getElementById('trackerMsg').innerHTML += "Information is incomplete. Try Again";
    return;
  }
  let recMileage = parseInt(recMileage1);
  let serMileage = parseInt(serMileage1);
  let incMileage = parseInt(incMileage1);
  let daysBtwnRecs = dayCalc(recDate, serDate);
  let milesBtwnRecs = serMileage - recMileage;
  let milesperday = milesBtwnRecs / daysBtwnRecs;
  let daysBtwnMaintSale = dayCalc(recDate, incDate);
  let estimatedInception = (milesperday * daysBtwnMaintSale) + recMileage;
  let milesIn = serMileage - estimatedInception;
  let daysIn = dayCalc(incDate, serDate);

  if (spot == 'both') {
    displayOutput();
    let msgDiv = document.getElementById('msgDiv');
    msgDiv.style.opacity = 1;
    updateInnerHTML(msgDiv);
  } else if (spot == 'all') {
    let splitR = document.getElementById('splitR');
    document.getElementById('splitL').style.display = "inline-block";
    splitR.style.display = "inline-block";
    updateInnerHTML(splitR);
  } else {
    let outputDiv2 = document.getElementById('outputDiv2');
    let outputDiv3 = document.getElementById('outputDiv3');
    outputDiv2.classList.add("arise");
    outputDiv2.style.height = "700px";
    outputDiv3.style.opacity = 1;
    updateInnerHTML(outputDiv3);
  }
  function updateInnerHTML(element) {
    element.innerHTML += "<b>The inception mileage is " + estimatedInception.toFixed() + "</b><br>";
    element.innerHTML += "Elapsed Days Claim/Maint: " + daysBtwnRecs.toFixed() + "<br>";
    element.innerHTML += "Elapsed Miles Claim/Maint: " + milesBtwnRecs.toFixed() + "<br>";
    element.innerHTML += "Miles Per Day (Average): " + milesperday.toFixed() + "<br>";
    element.innerHTML += "Elapsed Days Maint/Sale: " + daysBtwnMaintSale.toFixed() + "<br>";
    element.innerHTML += "Miles Elapsed in Contract: " + milesIn.toFixed() + "<br>";
    element.innerHTML += "Days Elapsed In Contract: " + daysIn.toFixed();
  }
}

function noteOutput(z) {
  let msgDiv = document.getElementById('msgDiv');
  let outputDiv3 = document.getElementById('outputDiv3');
  let splitL = document.getElementById('splitL');
  let whereOut;
  if (z == '1') {
    whereOut = outputDiv3;
  } else if (z == '2') {
    whereOut = msgDiv;
  } else if (z == '3') {
    whereOut = splitL;
  }
  const objectArr = JSON.parse(localStorage.getItem("objectArr"));
  for (i = 0; i < objectArr.length; i++) {
    if (i != 0) { whereOut.innerText += "\r"; }
    whereOut.innerText += "Date: " + objectArr[i].date;
    if (objectArr[i].isInception) {
      whereOut.innerText += " Inception\r";
    } else if (objectArr[i].isService) {
      whereOut.innerText += " Claim\r";
    } else {
      whereOut.innerText += "\r";
    }
    whereOut.innerText += "Mileage: " + objectArr[i].mileage + "\r";
    if (objectArr[i].notes == null) { objectArr[i].notes = "None"; }
    whereOut.innerText += "Notes: " + objectArr[i].notes + "\r";
  }
  hideTable();
  if (z == '1') {
    outputDiv2.classList.toggle("arise");
    outputDiv2.style.height = "700px";
  } else if (z == '2') {
    whereOut.style.opacity = '1';
  }
  if (z == '3') {
    let msgDiv = document.getElementById('msgDiv');
    document.getElementById('outputDiv').style.top = "25px";
    document.getElementById('outputDiv').style.left = "25px";
    document.getElementById('outputDiv').style.height = "90%";
    document.getElementById('outputDiv').style.width = "90%";
    splitL.style.opacity = '0';
    msgDiv.style.opacity = '1';
    msgDiv.innerHTML = "Click to show note format";
  }
}

document.addEventListener('click', function(e) {
  let msgDiv = document.getElementById('msgDiv');
  let splitL = document.getElementById('splitL');
  if (msgDiv.contains(e.target) && splitL.style.opacity == '0') {
    splitL.style.opacity = '1';
  } else if (msgDiv.contains(e.target) && splitL.style.opacity == '1') {
    splitL.style.opacity = '0';
  }
});

function displayOutput() {
  hideTable();
  let outputDiv = document.getElementById('outputDiv');
  outputDiv.classList.add("arise");
  outputDiv.style.height = "700px";
}

function closeOutput() {
  document.getElementById('splitL').innerHTML = "";
  document.getElementById('splitR').innerHTML = "";
  document.getElementById('splitL').style.display = "none";
  document.getElementById('splitR').style.display = "none";
  document.getElementById('msgDiv').innerHTML = "";
  document.getElementById('alertDiv').innerHTML = "";
  document.getElementById('msgDiv').style.opacity = 0;
  let outputDiv = document.getElementById('outputDiv');
  outputDiv.classList.remove("arise");
  outputDiv.style.height = "0px";
  outputDiv.style.width = "800px";
  outputDiv.style.top = "130px";
  outputDiv.style.left = "50px";
  showTable();
}

function closeOutput2() {
  document.getElementById('msgDiv').innerHTML = "";
  document.getElementById('alertDiv').innerHTML = "";
  let outputDiv2 = document.getElementById('outputDiv2');
  outputDiv3.innerHTML = "";
  outputDiv2.classList.remove("arise");
  outputDiv2.style.height = "0px";
  showTable();
}

function resetReport() {
  document.getElementById('msgDiv').innerHTML = "";
  document.getElementById('alertDiv').innerHTML = "";
  document.getElementById('trackerMsg').innerText = "";
  document.getElementById('trackerMini').innerText = "";
  document.getElementById('splitL').innerHTML = "";
  document.getElementById('splitR').innerHTML = "";
  document.getElementById('whichA').checked = false;
  document.getElementById('whichB').checked = false;
  document.getElementById('whichC').checked = false;
  let addLineCount = localStorage.getItem("addLineCount");
  let LineCount = parseInt(addLineCount);
  let inputElems = document.querySelectorAll(".tracker");
  let elemArr = Array.from(inputElems);
  for (let i = 0; i < elemArr.length; i++) {
    if(elemArr[i].value != null) {
      if(elemArr[i].checked) {
        elemArr[i].checked = false;
      } else {
        elemArr[i].value = "";
      }
    }
  }
  for (; LineCount > 0; LineCount--) {
    let rowId = "recTab" + LineCount;
    document.getElementById(rowId).style.visibility = "hidden";
  }
  const recordArr = JSON.parse(localStorage.getItem("recordArr"));
  for (let i = 0; i < recordArr.length; i++) {
    let recName = recordArr[i];
    localStorage.removeItem(recName + "spot");
  }
  localStorage.removeItem("serdate");
  localStorage.removeItem("sermileage");
  localStorage.removeItem("IDforCor");
  localStorage.removeItem("InceptionMiles");
  localStorage.removeItem("InceptionDate");
  localStorage.removeItem("incNote");
  localStorage.removeItem("serNote");
  for (let i = 0; i < 6; i++) {
    let elemId = "rec" + i;
    localStorage.removeItem(elemId + "Note");
    document.getElementById(elemId + "Notebin").innerText = "";
  }
  const blankArr = [];
  localStorage.setItem("objectArr", JSON.stringify(blankArr));
  localStorage.setItem("recordArr", JSON.stringify(blankArr));
  localStorage.setItem("addLineCount", "0");
  localStorage.setItem("savedRecs", "0");
  setDate();
}
//                                                                         AUTH GUIDE

function goGuide(option,name) {
  let usedBtn = document.getElementsByName(name);
  for (let i = 0; i < usedBtn.length; i++) {
    usedBtn[i].disabled = true;
  }
  switch(option) {
  case "oeover":
  case "am":
    document.getElementById('authGuide1').style.display = "none";
    document.getElementById('authGuideAM').style.display = "inline-block";
    break;
  case "oe":
    document.getElementById('authGuideOE').style.display = "inline-block";
    break;
  case "oeunder":
    document.getElementById('oeunder').style.display = "inline-block";
    break;
  case "rfovrmsrp":
    document.getElementById('rfovrmsrp').style.display = "inline-block";
    break;
  case "noship3":
    const pElem43 = document.createElement("p");
    pElem43.classList.add("bodyTab2");
    const textNode43 = document.createTextNode("Authorize MSRP. Contract Holder will have OOPC.");
    let div = document.getElementById("authGuideOE");
    pElem43.appendChild(textNode43);
    div.appendChild(pElem43);
    break;
  case "mayship3":
    const pElem8 = document.createElement("p");
    pElem8.classList.add("bodyTab2");
    const textNode8 = document.createTextNode("Ship part with permision from the Contract Holder.");
    let div8 = document.getElementById("rfovrmsrp");
    pElem8.appendChild(textNode8);
    div8.appendChild(pElem8);
    break;
  case "rfundmsrp":
    const pElem9 = document.createElement("p");
    pElem9.classList.add("bodyTab2");
    const textNode9 = document.createTextNode("Authorize MSRP.");
    let div9 = document.getElementById("authGuideOE");
    pElem9.appendChild(textNode9);
    div9.appendChild(pElem9);
    break;
  case "pricing":
    document.getElementById('authGuideAM').style.display = "none";
    document.getElementById('paGuide').style.display = "inline-block";
    break;
  case "listunder":
    document.getElementById('listUnder').style.display = "inline-block";
    break;
  case "rfovrlist":
    document.getElementById('rfovrlist').style.display = "inline-block";
    break;
  case "rfundlist":
    const pElem1 = document.createElement("p");
    pElem1.classList.add("bodyTab2");
    const textNode1 = document.createTextNode("Authorize Repair Facility price as it's MCE");
    let div10 = document.getElementById("listUnder");
    pElem1.appendChild(textNode1);
    div10.appendChild(pElem1);
    break;
  case "mayship":
    const pElem2 = document.createElement("p");
    pElem2.classList.add("bodyTab2");
    const textNode2 = document.createTextNode("Ship part with permision from the Contract Holder.");
    let div11 = document.getElementById("rfovrlist");
    pElem2.appendChild(textNode2);
    div11.appendChild(pElem2);
    break;
  case "noship":
    const pElem3 = document.createElement("p");
    pElem3.classList.add("bodyTab2");
    const textNode3 = document.createTextNode("Authorize PA list price under $250.00 and the remaining balance will be OOPC.");
    let div12 = document.getElementById("rfovrlist");
    pElem3.appendChild(textNode3);
    div12.appendChild(pElem3);
    break;
  case "listover":
    document.getElementById('listOver').style.display = "inline-block";
    break;
  case "costund":
    document.getElementById('costund').style.display = "inline-block";
    break;
  case "rfundcost":
    const pElem4 = document.createElement("p");
    pElem4.classList.add("bodyTab2");
    const textNode4 = document.createTextNode("Authorize Repair Facility price as it's MCE");
    let div13 = document.getElementById("costund");
    pElem4.appendChild(textNode4);
    div13.appendChild(pElem4);
    break;
  case "rfovrcost":
    document.getElementById('rfovrcost').style.display = "inline-block";
    break;
  case "mayship2":
    const pElem5 = document.createElement("p");
    pElem5.classList.add("bodyTab2");
    const textNode5 = document.createTextNode("Ship part with permission from the Contract Holder.");
    let div15 = document.getElementById("rfovrcost");
    pElem5.appendChild(textNode5);
    div15.appendChild(pElem5);
    break;
  case "noship2":
    const pElem6 = document.createElement("p");
    pElem6.classList.add("bodyTab2");
    const textNode6 = document.createTextNode("Authorize PA cost price under $250.00 and the remaining balance will be OOPC.")
    let div16 = document.getElementById("rfovrcost");
    pElem6.appendChild(textNode6);
    div16.appendChild(pElem6);
    break;
  case "sourcing":
    document.getElementById('authGuide1').style.display = "none";
    document.getElementById('authGuideOE').style.display = "none";
    document.getElementById('authGuideAM').style.display = "none";
    document.getElementById('paGuide').style.display = "none";
    document.getElementById('IHSourcing').style.display = "inline-block";
    break;
  }
}
//                                                                    MILEAGE DISCREP

function mileDiscrep() {
  let isTerm = document.getElementById('md1').checked;
  let isM2m = document.getElementById('md2').checked;
  let over90 = document.getElementById('md3').checked;
  let under90 = document.getElementById('md4').checked;
  let negMile = document.getElementById('md5').checked;
  let inaccMile = document.getElementById('md6').checked;
  let rollBack = document.getElementById('md7').checked;
  let hasHmpd = document.getElementById('md8').checked;
  if (isTerm) {
    if (negMile || inaccMile || rollBack) {
      crReview();
    }
  }
  if (isM2m) {
    if (under90) {
      if (rollBack) {
        crReview();
      }
    }
  }
  if (isM2m) {
    if (negMile || inaccMile) {
      mileageCalc();
    }
  }
  if (isM2m) {
    if (over90) {
      if (rollBack || hasHmpd) {
        proceed();
      }
    }
  }
  if (isTerm) {
    if (over90) {
      if (hasHmpd) {
        proceed();
      }
    }
  }
  if (isM2m) {
    if (under90) {
      if (hasHmpd) {
        document.getElementById('under90hmpd').style.display = "block";
      }
    }
  }
}

function proceed() {
  if (document.getElementById('proceed').style.display == "none") {
    document.getElementById('proceed').style.display = "block";
  } else {
    document.getElementById('proceed').style.display = "none";
  }
}

function noride() {
  if (document.getElementById('norideshare').style.display == "none") {
    document.getElementById('norideshare').style.display = "block";
  } else {
    document.getElementById('norideshare').style.display = "none";
  }
}

function crReview() {
  if (document.getElementById('crReview').style.display == "none") {
    document.getElementById('crReview').style.display = "block";
  } else {
    document.getElementById('crReview').style.display = "none";
  }
}

function mileageCalc() {
  if (document.getElementById('mileageCalc').style.display == "none") {
    document.getElementById('under90hmpd').style.display = "none";
    document.getElementById('MileDiscrep1').style.display = "none";
    document.getElementById('norideshare').style.display = "none";
    document.getElementById('mileageCalc').style.display = "block";
  } else {
    document.getElementById('mileageCalc').style.display = "none";
  }
}

function resetMD() {
  const mileRadios = document.getElementsByClassName("mdguide");
  for (i = 0; i < mileRadios.length; i++) {
    mileRadios[i].checked = false;
  }
  document.getElementById('mileageCalc').style.display = "none";
  document.getElementById('crReview').style.display = "none";
  document.getElementById('norideshare').style.display = "none";
  document.getElementById('proceed').style.display = "none";
  document.getElementById('under90hmpd').style.display = "none";
  document.getElementById('MileDiscrep1').style.display = "block";
}

function resetGuide() {
  const radioBtns = document.getElementsByClassName("authGuideradio");
  for (i = 0; i < radioBtns.length; i++) {
    radioBtns[i].checked = false;
    radioBtns[i].disabled = false;
  }
  document.getElementById('authGuide1').style.display = "inline-block";
  document.getElementById('authGuideAM').style.display = "none";
  document.getElementById('rfovrmsrp').style.display = "none";
  document.getElementById('oeunder').style.display = "none";
  document.getElementById('authGuideOE').style.display = "none";
  document.getElementById('paGuide').style.display = "none";
  document.getElementById('listUnder').style.display = "none";
  document.getElementById('rfovrlist').style.display = "none";
  document.getElementById('listOver').style.display = "none";
  document.getElementById('costund').style.display = "none";
  document.getElementById('rfovrcost').style.display = "none";
  document.getElementById('IHSourcing').style.display = "none";
}
//                                                                        Q AND A

function questAnswered(answerDiv) {
  if (answerDiv.style.opacity == "1") {
    return true;
  }
}

function questOpen() {
  if (document.getElementById("anstoquest1").classList.contains('active')) {
    return true;
  } else if (document.getElementById("anstoquest2").classList.contains('active')) {
    return true;
  } else if (document.getElementById("anstoquest3").classList.contains('active')) {
    return true;
  } else if (document.getElementById("anstoquest4").classList.contains('active')) {
    return true;
  } else if (document.getElementById("anstoquest5").classList.contains('active')) {
    return true;
  } else {
    return false;
  }
}

function showAnswer(questID) {
  let answerDivID = "ansto" + questID;
  let answerDiv = document.getElementById(answerDivID);
  if (answerDiv.classList.contains('active')) {
    answerDiv.classList.remove('active');
    return;
  } else if (!questOpen()) {
    answerDiv.classList.add('active');
    return;
  } else {
    return;
  }
}
//                                                                       LABOR RATE SCRIPT

function openScript() {
  let laborscriptDiv = document.getElementById("laborscriptDiv");
  let isOpen = checkOpen();
  if (laborscriptDiv.style.display == "none" && !isOpen) {
    laborscriptDiv.style.display = "block";
  } else {
    laborscriptDiv.style.display = "none";
  }
}

function setZero() {
  document.getElementById("asking").value = "";
  document.getElementById("radius").value = "";
  document.getElementById("type").value = "";
  document.getElementById("quant").value = "";
  document.getElementById("aveRate").value = "";
  document.getElementById("responseDiv_text").innerHTML = "";
  document.getElementById("current").value = "";
  document.getElementById("myScript").style.display = "inline";
  document.getElementById("noScript").style.display = "none";
  document.getElementById("yesScript").style.display = "none";
  document.getElementById("responseDiv").style.display = "none";
}

function scriptInfo() {
  let askingstr = document.getElementById("asking").value;
  let currentstr = document.getElementById("current").value;
  let asking = parseInt(askingstr);
  let current = parseInt(currentstr);
  if (current < 1) { current = asking; }
  let radius = document.getElementById("radius").value;
  let type = document.getElementById("type").value;
  let quant = document.getElementById("quant").value;
  let aveRate = document.getElementById("aveRate").value;
  let custom = document.getElementById("custom").value;
  localStorage.setItem("asking", asking);
  localStorage.setItem("radius", radius);
  localStorage.setItem("type", type);
  localStorage.setItem("quant", quant);
  localStorage.setItem("aveRate", aveRate);
  localStorage.setItem("current", current);
  localStorage.setItem("custom", custom);
}

function instructScript() {
  let instructL = document.getElementById("instructL");
  let instructScript = document.getElementById("instructScript");
  if (!instructL.classList.contains("showing")) {
    instructL.classList.add("showing") ;
    instructScript.innerText = "Hide"
  } else {
    instructL.classList.remove("showing") ;
    instructScript.innerText = "Instructions"
  }
}

function laborScript() {
  let radius = document.getElementById("radius").value;
  let type = document.getElementById("type").value;
  let quant = document.getElementById("quant").value;
  if (radius == "" || type == "" || quant == "") { return; }
  let askingstr = document.getElementById("asking").value;
  let aveRate = document.getElementById("aveRate").value;
  let currentstr = document.getElementById("current").value;
  let current = parseInt(currentstr);
  let asking = parseInt(askingstr);
  if (current < 1) { current = asking; }
  let whatDo = laborReview(asking, current, aveRate);
  document.getElementById("myScript").style.display = "none";
  document.getElementById("responseDiv").style.display = "block";
  localStorage.setItem("weTried", "notYet");
  if (whatDo == "allow") {
    document.getElementById("responseDiv_text").innerHTML = "Your Response is:<br>I have updated your repair facility profile and set the labor rate at that amount.";
    document.getElementById("noScript").style.display = "none";
    document.getElementById("yesScript").style.display = "none";
    buildLaborNote('underAve');
    return;
  } else {
    negotiateScript('f');
  }
}

function negotiateScript(x) {
  if (x == 'r') {
    setZero();
    return;
  }
  let askingElem = document.getElementById("asking");
  let asking = sanitizeInput(document.getElementById("asking").value);
  let aveRateElem = document.getElementById("aveRate");
  let aveRate =  sanitizeInput(document.getElementById("aveRate").value);
  let currentElem = document.getElementById("current");
  let current =  sanitizeInput(document.getElementById("current").value);
  let responseDiv_text = document.getElementById("responseDiv_text");
  let responseDiv = document.getElementById("responseDiv");
  document.getElementById("noScript").style.display = "initial";
  document.getElementById("yesScript").style.display = "initial";
  let whatDo = laborReview(asking, current, aveRate);
  let tryHarder = localStorage.getItem("weTried");
  if (x == 'y') {
    let agreed;
    if (tryHarder != "notYet") {
      agreed = tryHarder;
      buildLaborNote('halfway');
    } else {
      agreed = aveRate;
      buildLaborNote('atAve');
      agreed = parseInt(agreed).toFixed(2);
    }
    responseDiv_text.innerHTML = "Your Response is:<br>Thank you. I have updated your repair facility profile and set the labor rate at $" + agreed + ".";
    document.getElementById("noScript").style.display = "none";
    document.getElementById("yesScript").style.display = "none";
    return;
  }
  if (x == 'a') {
    let customstr = document.getElementById("custom").value;
    let custom = parseInt(customstr);
    if (custom < 1) { return; }
    responseDiv_text.innerHTML = "Your Response is:<br>Thank you. I have updated your repair facility profile and set the labor rate at $" + custom + ".";
    document.getElementById("noScript").style.display = "none";
    document.getElementById("yesScript").style.display = "none";
    buildLaborNote('custom');
    return;
  }
  if (x == 'n' &&  tryHarder == "notYet") {
    let pleaseD = (parseInt(asking) + parseInt(aveRate)) / 2;
    let please = pleaseD.toFixed(2);
    responseDiv_text.innerHTML =  "Your Response is:<br>Are you able to match us at $" + please + "?";
    localStorage.setItem("weTried", please);
    return;
  }
  if (x == 'n' && whatDo == "normal") {
    responseDiv_text.innerHTML = "Your Response is:<br>No problem. Thank you for considering it.<br>I will update your repair facility profile to $" + asking + ".<br>Please keep in mind there could be other times during the claims process that we may ask you to negotiate pricing";
    document.getElementById("noScript").style.display = "none";
    document.getElementById("yesScript").style.display = "none";
    buildLaborNote('declined');
  }
  if (x == 'n' && whatDo == "alt") {
    responseDiv_text.innerHTML = "Your Response is either:<br>No problem. Thank you for considering it.<br>I will update your repair facility profile to $" + asking + ".<br>Please keep in mind there could be other times during the claims process that we may ask you to negotiate pricing";
    responseDiv_text.innerHTML += "<br>OR: I have your current labor rate set at $" + current + ".<br>In order to increase the labor rate, we would request that verification be sent in.<br>I can start that process for you once we have finished.";
    responseDiv_text.innerHTML += "<br>Follow the most recent directives from AAS or discuss with your TL/DRG/Team Chat if needed.";
    document.getElementById("noScript").style.display = "none";
    document.getElementById("yesScript").style.display = "none";
    buildLaborNote('declined');
    return;
  }
  if (x == 'f') {
    responseDiv_text.innerHTML = "Your Response is:<br>The average labor rate in your area is $" + aveRate + ".<br>Are you able to match that?";
    return;
  }
}

function laborReview(askingStr, currentStr = 0, averageStr) {
  let asking = parseInt(askingStr);
  let current = parseInt(currentStr);
  let average = parseInt(averageStr);
  if (current == 0) {
    current = asking;
  }
  let normal = "normal";
  let alt = "alt";
  let allow = "allow";
  let diffInRate = asking - current;
  if (asking <= average) {
    return allow;
  } else if (asking <= current) {
    return normal;
  } else if (asking > 250 || diffInRate > 49.99) {
    return alt;
  } else {
    return normal;
  }
}

function buildLaborNote(result) {
  scriptInfo();
  let textarea = document.getElementById("textarea5");
  let please = localStorage.getItem("weTried");
  let asking = localStorage.getItem("asking");
  let radius = localStorage.getItem("radius");
  let type = localStorage.getItem("type");
  let quant = localStorage.getItem("quant");
  let aveRate = localStorage.getItem("aveRate");
  let current = localStorage.getItem("current");
  let custom = localStorage.getItem("custom");
  textarea.value = "Search Parameters:\rRadius: " + radius + "\rFacility Type: " + type + "\rNumber of Facilities: " + quant + "\r\r";
  textarea.value += "Average Labor Rate: $" + aveRate;
  if (asking != current) {
    textarea.value += "\rRepair Facility Previous Labor Rate: $" + current;
  }
  textarea.value += "\rRepair Facility Posted Labor Rate: $" + asking;
  if (result == "underAve") {
    textarea.value += "\r\rThe Repair Facility posted labor rate is under the average labor rate for comparable shops in the vicinity."
    textarea.value += "\rUpdated Repair Facility labor rate at: $" + asking;
  }
  if (result == "declined") {
    textarea.value += "\r\rThe Repair Facility is unwilling to negotiate the labor rate."
    textarea.value += "\rUpdated Repair Facility labor rate at: $" + asking;
  }
  if (result == "atAve") {
    textarea.value += "\r\rThe Repair Facility is willing to negotiate.\rThey agreed to the average rate for the area."
    textarea.value += "\rUpdated Repair Facility labor rate at: $" + aveRate;
  }
  if (result == "halfway") {
    textarea.value += "\r\rThe Repair Facility is willing to negotiate.\rThey agreed on midway between average and asking."
    textarea.value += "\rUpdated Repair Facility labor rate at: $" + please;
  }
  if (result == "custom") {
    textarea.value += "\r\rThe Repair Facility is willing to negotiate.\rThey made an offer under the current posted labor rate which we accepted";
    textarea.value += "\rUpdated Repair Facility labor rate at: $" + custom;
  }
  textarea.select();
  document.execCommand("copy");
}

document.addEventListener('click', function(e) {
  let swap1 = document.getElementById('swap1');
  let mySidenav = document.getElementById('mySidenav');
  if (!mySidenav.contains(e.target) && !swap1.contains(e.target)) {
    closeNav();
  }
});

document.addEventListener('click', function(e) {
  let sopnav = document.getElementById('sopnav');
  let navtag = document.getElementById('navtag');
  if (!navtag.contains(e.target) && !sopnav.contains(e.target)) {
    closePDFmenu();
  }
});

function closePDFmenu() {
  document.getElementById("navtag").style.display = "initial";
  document.getElementById("sopnav").classList.remove("open_sop");
  document.getElementById("sopnav2").classList.remove("open_sop");
  document.getElementById("sopnav3").classList.remove("open_sop");
}

function openSOPnav() {
  if (checkOpen()) { return; }
  document.getElementById("navtag").style.display = "none";
  document.getElementById("sopnav").classList.add("open_sop");
  document.getElementById("sopnav2").classList.add("open_sop");
  document.getElementById("sopnav3").classList.add("open_sop");
}

function showSOP(id) {
  closePDFmenu();
  const sources = [
    "./SOP/ClaimsBasic/Start_a_Claim.pdf",
    "./SOP/ClaimsBasic/Search_For_Claims.pdf",
    "./SOP/ClaimsBasic/Contract_Holder_Verification.pdf",
    "./SOP/ClaimsBasic/Parts_Verification.pdf",
    "./SOP/ClaimsBasic/Labor_Verification.pdf",
    "./SOP/ClaimsBasic/Assign_A_Task.pdf",
    "./SOP/ClaimsBasic/Set_An_Inspection.pdf",
    "./SOP/ClaimsBasic/Request_Records.pdf",
    "./SOP/ClaimsBasic/Upload_Documents.pdf",
    "./SOP/ClaimsBasic/Add_Or_Update_Repair_Facilites.pdf",
    "./SOP/ClaimsBasic/Finalizing_Claims.pdf",
    "./SOP/ClaimsBasic/Claim_Notes.pdf",
    "./SOP/ClaimsIssues/Handling_Escalations.pdf",
    "./SOP/ClaimsIssues/Parts_Resolution.pdf",
    "./SOP/ClaimsIssues/Part_Returns_and_Freight.pdf",
    "./SOP/ClaimsIssues/Close_Or_Set_Inactive.pdf",
    "./SOP/ClaimsIssues/Warranties_Recalls_TSBs.pdf",
    "./SOP/ClaimsIssues/Recognizing_Altered_Records.pdf",
    "./SOP/ClaimsIssues/Escalating_Misrepresentation_to_Legal.pdf",
    "./SOP/ClaimsIssues/RF_Management_Case.pdf",
    "./SOP/ClaimsIssues/TL_Request_Support_Regarding_Network_RF.pdf",
    "./SOP/ClaimsIssues/TL_Help_Request_Vendor_Network.pdf",
    "./SOP/Reviewing/Reviewing_Branded_Title.pdf",
    "./SOP/Reviewing/Reviewing_Commerical_Usage.pdf",
    "./SOP/Reviewing/Reviewing_Mileage_Discrepancies.pdf",
    "./SOP/Reviewing/Reviewing_Modifications.pdf",
    "./SOP/Reviewing/Reviewing_Oversized_Tires.pdf",
    "./SOP/Reviewing/Reviewing_Suspension_Modification.pdf",
    "./SOP/HowTo/Handle_MBI_Claims.pdf",
    "./SOP/HowTo/Handle_Preferred_Customers.pdf",
    "./SOP/HowTo/Key_And_Authorize_Tow.pdf",
    "./SOP/HowTo/Key_Rental_Reimbursement.pdf",
    "./SOP/HowTo/Key_Roadside_Reimbursement.pdf",
    "./SOP/HowTo/Request_Tracking.pdf",
    "./SOP/HowTo/Make_A_3Way_Call.pdf",
    "./SOP/HowTo/Reach_Out_To_DataManagement.pdf",
    "./SOP/Info/Terms_And_Abbreviations.pdf",
    "./SOP/Info/Enhanced_Deductible.pdf",
    "./SOP/Info/Fluid_Pricing_Sheet.pdf",
    "./SOP/Info/PT_Or_General_Claim.pdf",
    "./SOP/Info/Repair_Facility_Types.pdf",
    "./SOP/Info/PRF_Location.pdf",
    "./SOP/Info/CMS_Emails.pdf",
    "./SOP/Info/Text_Notifications.pdf",
    "./SOP/Info/PT_First_Contact.pdf",
    "./SOP/Info/State_Tax.pdf",
    "./SOP/Info/Employee_Handbook.pdf"
        ];
  const index = parseInt(id.substring(3)) - 1;
  const src = sources[index];
  const iframe = document.createElement('iframe');
  iframe.src = src;
  const PDFdepot = document.getElementById('PDFdepot');
  const existingIframe = PDFdepot.querySelector('iframe');
  if (existingIframe) {
    PDFdepot.removeChild(existingIframe);
  }
  PDFdepot.appendChild(iframe);
  PDFdepot.style.display = 'block';
}

function closeSOP() {
  const PDFdepot = document.getElementById('PDFdepot');
  const iframe = PDFdepot.querySelector('iframe');
  if (iframe) {
    PDFdepot.removeChild(iframe);
  }
  PDFdepot.style.display = 'none';
}//Restricted Use License
//
//This code is provided under the following terms and conditions:
//
//1. You are not allowed to use, copy, modify, merge, publish, distribute, sublicense, or sell copies of this code in any form, modified or unmodified, without express written permission from the author.
//
//2. You are not allowed to use this code for any illegal or unethical purpose.
//
//3. This license applies to all versions of the code previously released, as well as all future versions. Any prior statements made about permission given are hereby revoked.
//
//4. This code is provided "as is", without warranty of any kind, express or implied. The author shall not be liable for any damages arising from the use of this code.
//
//By using this code, you agree to abide by these terms and conditions. Failure to comply with these terms may result in legal action.
//
//For inquiries regarding licensing or permission to use this code in ways not covered by this license, please contact the author at adjusterconsole@gmail.com.

function swapPage(x) {
  if (x == '1') {
    window.location.href = "index.html";
  } else if (x == '2') {
    window.location.href = "index2.html";
  } else {
    return;
  }
}

function setVer(x) {
  if (x == '1') {
    localStorage.setItem('currentVer', '1');
  } else if (x == '2') {
    localStorage.setItem('currentVer', '2');
  } else {
    return;
  }
}

function shadMaker() {
  window.location.href = "shadowGen/shadIndex.html";
}

function checkOpen() {
  const elements = [
    document.getElementById("TPDiv"),
    document.getElementById("statNote"),
    document.getElementById("Snippings"),
    document.getElementById("RFIBDH"),
    document.getElementById("RFIBND"),
    document.getElementById("TGAFOBTN"),
    document.getElementById("TGAFOABTN"),
    document.getElementById("TGAFSABTN"),
    document.getElementById("TGAFOSABTN"),
    document.getElementById("newAuthstyle"),
    document.getElementById("resrcDiv")
  ];
  return elements.some(el => el.style.display === "inline-block");
}

function getContact(whichInfo) {
  let whichOne = parseInt(whichInfo);
  let textarea = document.getElementById('textarea1');
  let lines = textarea.value.split('\n');
  let start = lines.slice(0, whichOne).reduce((acc, curr) => acc + curr.length + 1, 0);
  let end = start + lines[whichOne].length;
  textarea.focus();
  textarea.setSelectionRange(start, end);
  let tempStr = textarea.value.substring(start, end).trim();
  return tempStr.slice(9).trim();
}

function MENU() {
  const theMenu = document.getElementById("LOCK1");
  const BtnBuilder = document.getElementById("BtnBuilder");
  const appearance = document.getElementById("appearance");
  const menuOpen = localStorage.getItem("menuOpen");

  if (menuOpen === 'false') {
    theMenu.innerText = "\u2666 Close \u2666";
    appearance.style.top = "45px";
    appearance.style.opacity = '1';
    BtnBuilder.style.top = "70px";
    BtnBuilder.style.opacity = '1';
    localStorage.setItem("menuOpen", "true");
    return;
  } else if (menuOpen === 'true') {
    BtnBuilder.style.top = "20px";
    BtnBuilder.style.opacity = '0';
    appearance.style.top = "20px";
    appearance.style.opacity = '0';
    theMenu.innerText = "\u2666 Settings \u2666";
    localStorage.setItem("menuOpen", "false");
    return;
  }
  localStorage.setItem("menuOpen", "false");
  MENU();
}

function transAuth() {
  document.getElementById("module_trans_backing").classList.add("trsnActive");
  localStorage.setItem('transauthPage', '1');
  localStorage.removeItem("Diag");
}

function showtransOop() {
  document.getElementById("module_trans_8qdiv").classList.remove("invisible");
  document.getElementById("module_trans_8adiv").classList.remove("invisible");
}

function hidetransOop() {
  document.getElementById("module_trans_8qdiv").classList.add("invisible");
  document.getElementById("module_trans_8adiv").classList.add("invisible");
}

function requestorNo(x) {
  if (x === 'y') {
    if (document.getElementById("trans_ans3d").checked) {
      document.getElementById("trans_ans3d").checked = false;
    }
  }
  if (x === 'n') {
    if (document.getElementById("trans_ans3c").checked) {
      document.getElementById("trans_ans3c").checked = false;
    }
    if (document.getElementById("trans_ans3b").checked) {
      document.getElementById("trans_ans3b").checked = false;
    }
    if (document.getElementById("trans_ans3a").checked) {
      document.getElementById("trans_ans3a").checked = false;
    }
  }
}

function uncheck_All() {
  let checkboxes = document.querySelectorAll('input[type="checkbox"]');
  checkboxes.forEach(function(checkbox) {
    checkbox.checked = false;
  });

  let radios = document.querySelectorAll('input[type="radio"]');
    radios.forEach(function(radio) {
    radio.checked = false;
  });

  let trans_ansNum = document.getElementsByName("ftrans_ansNum");
  trans_ansNum.forEach(function(inputNumber) {
    inputNumber.value = '';
  });
}

function noncovcomp(x) {
  if (x === 'y') {
    if (document.getElementById("trans_ans8g").checked) {
      document.getElementById("trans_ans8g").checked = false;
    }
  }
  if (x === 'n') {
    if (document.getElementById("trans_ans8e").checked) {
      document.getElementById("trans_ans8e").checked = false;
    }
    if (document.getElementById("trans_ans8f").checked) {
      document.getElementById("trans_ans8f").checked = false;
    }
  }
}

function saveDiag(property,id) {
  let Diag = JSON.parse(localStorage.getItem('Diag'));
  let totalspark = document.getElementById("totalspark");
  if (!Diag) {
    Diag = {
      trans: false,
      diag: false,
      flush: false,
      press: false,
      pan: false,
      pull: false,
      data: false,
      spark: 0,
      point: false
    };
  }
  if (property === 'sparkplus') {
    Diag.spark += 1;
    totalspark.innerHTML = Diag.spark;
  } else if (property === 'sparkminus' && Diag.spark > 0) {
    Diag.spark -= 1;
    totalspark.innerHTML = Diag.spark;
  } else if (property && property !== 'next') {
    if (Diag.hasOwnProperty(property) && Diag[property] === false) {
      Diag[property] = true;
      var elem = document.getElementById(id);
      elem.innerHTML = "Del";
      elem.classList.add("butswap");
    } else if (Diag.hasOwnProperty(property) && Diag[property] === true) {
      Diag[property] = false;
      var elem = document.getElementById(id);
      elem.innerHTML = "Add";
      elem.classList.remove("butswap");
    }
  }
  localStorage.setItem('Diag', JSON.stringify(Diag));
  if (property === 'next') {
    let transauthPage = localStorage.getItem('transauthPage');
    if (transauthPage === '1') {
      document.getElementById('module_trans_1').classList.remove('trsnActive');
      document.getElementById('module_trans_4').classList.add('trsnActive');
      localStorage.setItem('transauthPage', '2');
    } else if (transauthPage === '2') {
      document.getElementById('module_trans_4').classList.remove('trsnActive');
      document.getElementById('module_trans_7').classList.add('trsnActive');
      localStorage.setItem('transauthPage', '3');
    } else if (transauthPage === '3') {
      finishtransAuth();
      return;
    }
  }
  if (property === 'back') {
    let transauthPage = localStorage.getItem('transauthPage');
    if (transauthPage === '3') {
      document.getElementById('module_trans_7').classList.remove('trsnActive');
      document.getElementById('module_trans_4').classList.add('trsnActive');
      localStorage.setItem('transauthPage', '2');
    } else if (transauthPage === '2') {
      document.getElementById('module_trans_4').classList.remove('trsnActive');
      document.getElementById('module_trans_1').classList.add('trsnActive');
      localStorage.setItem('transauthPage', '1');
    } else if (transauthPage === '1') {
      return;
    }
  }
  if (property === 'cancel') {
    uncheck_All();
    document.getElementById('module_trans_7').classList.remove('trsnActive');
    document.getElementById('module_trans_4').classList.remove('trsnActive');
    document.getElementById('module_trans_1').classList.add('trsnActive');
    document.getElementById("module_trans_backing").classList.remove("trsnActive");
    return;
  }
}

function finishtransAuth() {
  let rfName = getContact('0');
  let isDiag = false;
  let isDiag2 = false;
  let addOn = false;
  let addOnrec = false;
  let Diag = JSON.parse(localStorage.getItem('Diag'));
  for (let property in Diag) {
    if (property !== 'trans' && property !== 'diag' && property !== 'flush') {
      if ((property !== 'spark' && Diag[property] === true) || (property === 'spark' && Diag[property] > 0)) {
        isDiag = true;
        isDiag2 = true;
      }
    }
  }
  let transLabor = document.getElementById("trans_ans4a").value
  let diagLabor = document.getElementById("trans_ans4b").value
  let flushLabor = document.getElementById("trans_ans4c").value
  const trans_Ans_1 = document.querySelector('input[name="trans_ans1"]:checked');
  const trans_Ans_2 = document.querySelector('input[name="trans_ans2"]:checked');
  let cost = parseInt(document.getElementById("trans_ans4").value);
  let trans_ans7 = document.getElementById("trans_ans7").value;
  let testElec = .3 * Diag.spark;
  const propertyStrings = {
    trans: "Pro Demand shows " + transLabor + " hours to R/R transmission.\r",
    diag: "Pro Demand shows " +  diagLabor + " hours for diagnostics.\r",
    flush: "Pro Demand shows " +  flushLabor + " hours to the flush the cooler.\r",
    press: ".X for line pressure test ",
    pan: ".X for pan drop ",
    pull: ".3 for code pull ",
    data: ".2 for data monitoring ",
    spark: " Electrical tests: " + Diag.spark + " @ .3 each is " + Math.round(testElec) + " ",
    point: ".4 for pinpoint test. "
    };
  let transAuth1 = "No inspection needed as the Repair Facility diagnostic matches Contract Holder concern.\rThe repair Facility sent supporting photos showing excessive metal debris present.";
  let transAuth2 = "An inspection was sent to verify failures.\rI have reviewed report and inspection photos.\rThe inspection review note is completed.";
  let transAuth3 = "Requested and reviewed photos from Repair Facility.\rPhoto review note is completed.";
  let recordsTrans1 = "No records requested as history will not change claim decision.\rVehicle is not in waiting period. No prior related claims.\rNo recalls, TSBs, or unresolved mileage concerns.\rContract Holder is in sequence " + trans_ans7 + ".";
  let recordsTrans2 = "Requested and reviewed records and statement.\rRecord review note is completed.";
  let requestedTrans1 = "After reviewing all relevant documentation, we are moving forward with verified failures.";
  let beenVerified = "Verified labor, fluid type, and capacities in ProDemand.\r";
  let oopcsTrans1 = "Need to review OOPC of $";
  let oopcsTrans1a = "Need to review OOPC when OOPC is determined";
  let oopcsTrans2a = " with Contract Holder.";
  let oopcsTrans2b = " and shipping option with Contract Holder.";
  let oopcsTrans2c = "OOPC is due to differences in ";
  let oopcsTrans3 = "Need to review shipping option with Contract Holder.";
  let oopcsTrans3a = "Have not given authorization info to the Repair Facility at this time.";
  let oopcsTrans4 = "Contract Holder has no OOPC besides deductible.";
  let oopcsTrans4a = "Gave authorization info and payment instructions to ";
  let noncovTrans1 = "Will inform Contract Holder of non-covered components";
  let noncovTrans2 = "There were denied items on this claim.\rReview denial note for more details";
  let outputString = "Verified internal failure to the transmission using the Repair Facility supplied diagnostic and photos.\rThe transmission has coverage under the terms of the contract.\rVerified OEM parts using Forte and AM parts using PA.\rUsed in-house sourcing to determine the MCE option.\rThe MCE option is a ";

  if (trans_Ans_1.value === null) {
    uncheck_All();
    return;
  }
  outputString += trans_Ans_1.value + " unit from " + trans_Ans_2.value + " for $" + cost.toFixed(2) + ".\r" + beenVerified;
  for (let property in Diag) {
    if (Diag.hasOwnProperty(property)) {
      if ((property !== 'spark' && Diag[property] === true) || (property === 'spark' && Diag[property] > 0)) {
        outputString += propertyStrings[property];
        if (isDiag && property === 'flush') {
          outputString += "Diag completed: "
          isDiag = false;
        }
      }
    }
  }
  if (isDiag2) {
    outputString += "\r";
  }
  if (document.getElementById("trans_ans3d").checked == true) {
    outputString += transAuth1 + "\r" + recordsTrans1 + "\r";
  } 
  if (document.getElementById("trans_ans3a").checked == true) {
    outputString += transAuth2 + "\r";
    addOn = true;
    addOnrec = true;
  } 
  if (document.getElementById("trans_ans3b").checked == true) {
    outputString += transAuth3 + "\r";
    addOn = true;
    addOnrec = true;
  } 
  if (document.getElementById("trans_ans3c").checked == true) {
    outputString += recordsTrans2 + "\r";
    addOn = true;
  } 
  if(addOnrec) {
    outputString += recordsTrans1 + "\r";
  }
  if(addOn) {
    outputString += requestedTrans1 + "\r";
  }
  let trans_ans9a = document.getElementById("trans_ans9a");
  if (!trans_ans9a.checked) {
    if (document.getElementById("trans_ans8d").checked) {
      outputString += oopcsTrans4 + "\r" + oopcsTrans4a + rfName + "\r";
    } else if (document.getElementById("trans_ans8b").checked) {
      outputString += oopcsTrans3 + "\r" + oopcsTrans3a + "\r";
    } else if (document.getElementById("trans_ans8a").checked || document.getElementById("trans_ans8c").checked) {
      let oopcCausep = document.getElementById("trans_ans8h");
      let oopcCausel = document.getElementById("trans_ans8i");
      let oopcCauseb = document.getElementById("trans_ans8j");
      let oopcAmt1 = document.getElementById("trans_ans8k").value;
      let num = parseFloat(oopcAmt1);
      if (isNaN(num)) {
        alert("Please enter a valid amount for OOPC");
        return;
      }
      let oopcAmt2 = num.toFixed(2);
      let oopcAmt = oopcAmt2.toString();
      let oopcCausedBy;
      if (oopcCauseb.checked) { oopcCausedBy = "parts and labor."; }
      if (oopcCausel.checked) { oopcCausedBy = "labor."; }
      if (oopcCausep.checked) { oopcCausedBy = "parts."; }
      outputString += oopcsTrans1 + oopcAmt;
      outputString += (document.getElementById("trans_ans8c").checked ? oopcsTrans2b : oopcsTrans2a) + "\r";
      outputString += oopcsTrans2c + oopcCausedBy + "\r" + oopcsTrans3a + "\r";
      document.getElementById("trans_ans8a").checked = false;
      document.getElementById("trans_ans8c").checked = false;
    }
  }
  if (document.getElementById("trans_ans8a").checked || document.getElementById("trans_ans8c").checked) {
    if (trans_ans9a.checked) {
      outputString += oopcsTrans1a;
    }
  }
  trans_ans9a.checked = false;
  document.getElementById("trans_ans8a").checked = false;
  document.getElementById("trans_ans8c").checked = false;
  let noncovComps = document.getElementById("trans_ans8e");
  if (noncovComps.checked) {
    outputString += noncovAuth1 + "\r";
    noncovComps.checked = false;     
  }
  let deniedComps = document.getElementById("trans_ans8f");
  if (deniedComps.checked) {
    outputString += noncovAuth2;
    deniedComps.checked = false;
  }
  copy(outputString);
  document.getElementById("module_trans_backing").classList.remove("trsnActive");
  uncheck_All();
  return;
}

function STMTTEMP() {
  let statement = document.getElementById("statement");
  if (statement.style.display == "none") {
    statement.style.display = "initial";
    localStorage.setItem("statePage", "1");
    let mode = localStorage.getItem("mode");
    if(checkOpen()) {
      ShowTemps();
    }
  } else {
    return;
  }
}

function cancelState() {
  let stmttempta = document.getElementsByClassName("stmt_temp_ta");
  for (i = 0; i < stmttempta.length; i++) {
    stmttempta[i].value = "";
  }
  let stmt_temp_rad = document.getElementsByClassName("stmt_temp_rad");
  for (i = 0; i < stmt_temp_rad.length; i++) {
    stmt_temp_rad[i].checked = false;
  }
  document.getElementById("time_owned").value = "";
  document.getElementById("time_unit").value = "";
  document.getElementById("approx_mile").value = "";
  document.getElementById("state13").style.display = "none";
  document.getElementById("state1").style.display = "inherit";
  document.getElementById("statement").style.display = "none";
  let chState_div = document.getElementsByClassName("chState_div");
  for (i = 0; i < chState_div.length; i++) {
    chState_div[i].style.display = "none";  
  }
  document.getElementById("state1").style.display = "inherit";
  document.getElementById("statement").style.display = "none";
}

function advanceState(btnId) {
  let page = parseInt(localStorage.getItem("statePage"));
  let pageId = "state" + page;
  let nextPage = page + 1;
  let nextPageId;
  
  if (btnId == "chno3" || btnId == "chno5" || btnId == "chno7" || btnId == "chno11") {
    nextPage = page + 2;
  }
  if (nextPage == "3" || nextPage == "5" || nextPage == "7" || nextPage == "11") {
    document.getElementById("advanceState").style.display = "none";
  }
  if (nextPage == "4" || nextPage == "6" || nextPage == "8" || nextPage == "9" || nextPage == "12" || nextPage == "13") {
    document.getElementById("advanceState").style.display = "inline-block";
  }
  console.log(page, nextPage);
  if (nextPage > 13) {
    stateFinish();
    return;
  }
  nextPageId = "state" + nextPage;
  console.log(nextPageId);
  document.getElementById(pageId).style.display = "none";
  document.getElementById(nextPageId).style.display = "inherit";
  localStorage.setItem("statePage", nextPage);
}

function backState() {
  let page = localStorage.getItem("statePage");
  if (page == "1") { return; }
  let pageId = "state" + page;
  let pageInt = parseInt(page);
  console.log(pageInt);
  if (pageInt == 13 || pageInt == 9 || pageInt == 7 || pageInt == 5) {
    pageInt = pageInt - 2;
  } else {
    pageInt = pageInt - 1;
  }
  if (pageInt == "3" || pageInt == "5" || pageInt == "7" || pageInt == "11") {
    document.getElementById("advanceState").style.display = "none";
  }
  if (pageInt == "2" || pageInt == "4" || pageInt == "6" || pageInt == "8" || pageInt == "9" || pageInt == "10" || pageInt == "12" || pageInt == "13") {
    document.getElementById("advanceState").style.display = "inline-block";
  }
  console.log(pageInt);
  let nextId = "state" + pageInt;
  localStorage.setItem("statePage", pageInt);
  document.getElementById("state12").style.display = "none";
  document.getElementById("state8").style.display = "none";
  document.getElementById("state6").style.display = "none";
  document.getElementById("state4").style.display = "none";
  document.getElementById(pageId).style.display = "none";
  document.getElementById(nextId).style.display = "block";
}

function stateFinish() {
  let text = '';
  let stateQ1 = "Can you describe what happened?";
  let stateQ2 = "When did the issue first occur?";
  let stateQ3 = "Were there any prior related issues?";
  let stateQ4 = "What were they and when did they occur?";
  let stateQ5 = "Were there any warning lights?";
  let stateQ6 = "Please describe:";
  let stateQ7 = "Was there any noise, smoke, or smell?";
  let stateQ8 = "Please describe:";
  let stateQ9 = "How long have you owned the vehicle?";
  let stateQ10 = "Do you know the approximate mileage when you purchased it?";
  let stateQ11= "Was the vehicle towed to the repair facility?";
  let stateQ12 = "Where was it towed from and what tow company did you use?";
  let stateQ13 = "Any additional comments or notes:";
  let state1ans = document.getElementById("state1ans").value;
  let state2ans = document.getElementById("state2ans").value;
  let state3ans = document.getElementById("chyes3").checked;
  let state4ans = document.getElementById("state4ans").value;
  let state5ans = document.getElementById("chyes5").checked;
  let state6ans = document.getElementById("state6ans").value;
  let state7ans = document.getElementById("chyes7").checked;
  let state8ans = document.getElementById("state8ans").value;
  let state9ansa = document.getElementById("time_owned").value;
  let state9ansb = document.getElementById("time_unit").value;
  let state10ans = document.getElementById("approx_mile").value;
  let state11ans = document.getElementById("chyes11").checked;
  let state12ans = document.getElementById("state12ans").value;
  let state13ans = document.getElementById("state13ans").value;
  text = stateQ1 + "\r" + state1ans + "\r\r" + stateQ2 + "\r" + state2ans + "\r\r" + stateQ3 + "\r";
  if (state3ans) {
    text += "Yes - " + state4ans + "\r\r" + stateQ5 + "\r";
  } else {
    text += "No\r\r" + stateQ5 + "\r";
  }
  if (state5ans) {
    text += "Yes - " + state6ans + "\r\r" + stateQ7 + "\r";
  } else {
    text += "No\r\r" + stateQ7 + "\r";
  }
  if (state7ans) {
    text += "Yes - " + state8ans + "\r\r" + stateQ9 + "\r";
  } else {
    text += "No\r\r" + stateQ9 + "\r";
  }
  text += state9ansa + " " + state9ansb + "\r\r" + stateQ10 + "\r";
  if (state10ans == "" || state10ans == null) {
    text += "No\r\r" + stateQ11 + "\r";
  } else {
    text += state10ans + "\r\r" + stateQ11 + "\r";
  }
  if (state11ans) {
    text += "Yes - " + state12ans + "\r\r" + stateQ13 + "\r";
  } else {
    text += "No\r\r" + stateQ13 + "\r";
  }
  text += state13ans;
  let stmttempta = document.getElementsByClassName("stmt_temp_ta");
  for (i = 0; i < stmttempta.length; i++) {
    stmttempta[i].value = "";
  }
  let stmt_temp_rad = document.getElementsByClassName("stmt_temp_rad");
  for (i = 0; i < stmt_temp_rad.length; i++) {
    stmt_temp_rad[i].checked = false;
  }
  document.getElementById("time_owned").value = "";
  document.getElementById("time_unit").value = "";
  document.getElementById("approx_mile").value = "";
  copy(text);
  document.getElementById("state13").style.display = "none";
  document.getElementById("state1").style.display = "inherit";
  document.getElementById("statement").style.display = "none";
}

function statNOTE() {
  let statNote = document.getElementById("statNote");
  let statNoteinner = document.getElementById("statNoteinner");
  if (statNote.style.display == "inline-block" || checkOpen()) {
    statNote.style.display = "none";
    return;
  }
  statNote.style.display = "inline-block";
}

function cancelStat() {
  uncheck_All();
  document.getElementById("optionalNote").value = "";
  let statNote = document.getElementById("statNote");
  let statNoteinner = document.getElementById("statNoteinner");
  statNote.style.display = "none";
}

function highlander(elemId) {
  document.getElementById(elemId).checked = false;
}

function submitStat() {
  const checkboxes = ['stat1', 'stat2', 'stat3', 'stat4', 'stat5', 'stat6', 'stat7', 'stat8', 'stat9'];
  const noteStrings = {
    'stat1note': 'We are waiting on the inspection to verify failure.\n',
    'stat2note': 'We are waiting on records from the Contract Holder to determine Pre-X.\n',
    'stat3note': 'We are waiting for the Contract Holders statement as it may influence the claim outcome.\n',
    'stat4note': 'verify failure.',
    'stat5note': 'correct VIN or mileage issue.',
    'stat6note': 'The Repair facility has been notified.\n',
    'stat7note': 'The Contract Holder has been notified.\n',
    'stat8note': 'I was unable to reach the Contract Holder but I left a VM and tasked callbacks.\n',
    'stat9note': 'Parts and labor are keyed in and verified.\n',
    'stat4and5CommonNote': 'We are waiting on photos from the Repair Facility to '
  };
  let output = '';
  checkboxes.slice(0, 3).forEach(id => {
    if (document.getElementById(id).checked) {
      output += noteStrings[id + 'note'];
    }
  });
  const stat4Checked = document.getElementById('stat4').checked;
  const stat5Checked = document.getElementById('stat5').checked;
  const stat9Checked = document.getElementById('stat9').checked;
  if (stat4Checked || stat5Checked) {
    output += noteStrings['stat4and5CommonNote'];
    if (stat4Checked && stat5Checked) {
      output += noteStrings['stat4note'] + ' and ' + noteStrings['stat5note'] + '\n';
    } else if (stat4Checked) {
      output += noteStrings['stat4note'] + '\n';
    } else if (stat5Checked) {
      output += noteStrings['stat5note'] + '\n';
    }
  }
  checkboxes.slice(6).forEach(id => {
    if (document.getElementById(id).checked) {
      output += noteStrings[id + 'note'];
    }
  });
  const optionalText = document.getElementById('optionalNote').value.trim();
  if (optionalText !== '') {
    output += optionalText + '\n';
  }
  copy(output);
  cancelStat();
}

function showAuth() {
  let newAuthstyle = document.getElementById("newAuthstyle");
  let isOpen = checkOpen();
  if (newAuthstyle.style.display == "inline-block" || isOpen) {
    newAuthstyle.style.display = "none";
    return;
  }
  newAuthstyle.style.display = "inline-block";
}

function moveAuth() {
  document.getElementById("authParts").style.display = "none";
  document.getElementById("authRequests").style.display = "inline-block";
}

function moveAuth2() {
  document.getElementById("authRequests").style.display = "none";
  document.getElementById("authOopcs").style.display = "inline-block";
}

function cancelNewauth() {
  document.getElementById("authParts").style.display = "inline-block";
  document.getElementById("authRequests").style.display = "none";
  document.getElementById("authOopcs").style.display = "none";
  document.getElementById("newAuthstyle").style.display = "none";
  document.getElementById("OOPoptDiv").style.display = "none";
  let boxes = document.querySelectorAll(".FNA");
  for (i = 0; i < boxes.length; i++) {
    boxes[i].checked = false;
  }
}

function newAuth() {
  let newauthLine0 = "RF Contact name: ";
  let newauthLine1 = "Verified failures using RF diagnostic.";
  let newauthLine1a = "Verified failures using RF diagnostic and inspection report.";
  let newauthLine1b = "Verified failures using RF diagnostic and RF supplied photos.";
  let newauthLine2 = "Contract has coverage for failed components.";
  let newauthLine3 = "Verified OEM parts using Forte and AM parts using PA.";
  let newauthLine4 = "Verified labor using Pro Demand.";
  let newauthLine5 = "Verified payment info with RF contact at: ";
  document.getElementById("authParts").style.display = "inline-block";
  document.getElementById("authRequests").style.display = "none";
  document.getElementById("authOopcs").style.display = "none";
  document.getElementById("newAuthstyle").style.display = "none";
  let stage = '';
  let bananaMilkshake = getContact('1');
  let rfContact = getContact('0');
  stage = newauthLine0 + rfContact + "\r";
  let firstAuthline = newauthLine1;
  if (document.getElementById("auth6").checked) { firstAuthline = newauthLine1a; }
  if (document.getElementById("auth7").checked) { firstAuthline = newauthLine1b; }
  stage += firstAuthline + "\r" + newauthLine2 + "\r" + newauthLine3 + "\r" + newauthLine4  + "\r" + newauthLine5 + bananaMilkshake + "\r";
  partsOptions(stage);
}

function setValue() {
  document.getElementById("auth1").value = "Using Repair Facility OEM parts at or under $250.00.";
  document.getElementById("auth2").value = "Using Repair Facility parts at or under sourcing MCE.";
  document.getElementById("auth3").value = "Using sourcing MCE as a credit toward Repair Facility parts.";
  document.getElementById("auth4").value = "Using sourcing MCE as a credit toward Repair Facility parts or shipping in.";
  document.getElementById("auth5").value = "Adjusted price to reasonable amount near MCE.\rThis was done considering all factors including claim delays, shipping costs, liability for future failures, time and mileage in coverage, number of prior claims and their cost, etc.";
}

function partsOptions(stage) {
  setValue();
  let partOpts = document.getElementsByName("authparts");
  for (i = 0; i < partOpts.length; i++) {
    if (partOpts[i].checked == true) {
      stage += partOpts[i].value + "\r";
    }
  }
  requestOptions(stage);
}

function requestOptions(stage) {
  let inspAuth1 = "No inspection needed as RF diagnostic matches CH concern.";
  let inspAuth2 = "Sent inspection to verify failures.\rReviewed report and inspection photos.\rInspection review note is completed.";
  let inspAuth3 = "Requested and reviewed photos from Repair Facility.\rPhoto review note is completed.";
  let recordsAuth1 = "No records requested as history will not change claim decision.\rVehicle is not in waiting period.\rConcern is not maintenance related.\rNo prior related claims.\rNo recalls, TSBs, or mileage concerns.";
  let recordsAuth2 = "Requested and reviewed records and statement.\rRecord review note is completed.";
  let requestedAuth1 = "After reviewing all relevant documentation, we are moving forward with verified failures.";

  if (document.getElementById("auth9").checked == true) {
    stage += inspAuth1 + "\r" + recordsAuth1 + "\r";
    issuesOptions(stage);
    return;
  }
  if (document.getElementById("auth6").checked == true) {
    stage += inspAuth2 + "\r";
  }
  if (document.getElementById("auth7").checked == true) {
    stage += inspAuth3 + "\r";
  }
  if (document.getElementById("auth8").checked == true) {
    stage += recordsAuth2 + "\r";
  }
  stage += requestedAuth1 + "\r";
  issuesOptions(stage);
}

function issuesOptions(stage) {
  let oopcsAuth1 = "Need to review OOPC of $";
  let oopcsAuth2a = " with Contract Holder.";
  let oopcsAuth2b = " and shipping option with Contract Holder.";
  let oopcsAuth2c = "OOPC is due to differences in ";
  let oopcsAuth3 = "Need to review shipping option with Contract Holder.";
  let oopcsAuth3a = "Have not given authorization info to the Repair Facility at this time.";
  let oopcsAuth4 = "Contract Holder has no OOPC besides deductible.";
  let oopcsAuth4a = "Gave authorization info and payment instructions to ";

  let rfName = getContact('0');
  if (document.getElementById("auth13").checked) {
    stage += oopcsAuth4 + "\r" + oopcsAuth4a + rfName + "\r";
    finishAuth(stage);
    return;
  }
  if (document.getElementById("auth11").checked) {
    stage += oopcsAuth3 + "\r" + oopcsAuth3a + "\r";
    finishAuth(stage);
    return;
  }
  if (document.getElementById("auth10").checked || document.getElementById("auth12").checked) {
    let oopcCausep = document.getElementById("auth14");
    let oopcCausel = document.getElementById("auth15");
    let oopcCauseb = document.getElementById("auth16");
    let oopcAmt1 = document.getElementById("auth17").value;
    document.getElementById("auth17").value = "";
    let num = parseFloat(oopcAmt1);
    if (isNaN(num)) {
      alert("Please enter a valid amount for OOPC");
      return;
    }
    let oopcAmt2 = num.toFixed(2);
    let oopcAmt = oopcAmt2.toString();
    let oopcCausedBy;
    if (oopcCauseb.checked) { oopcCausedBy = "parts and labor."; }
    if (oopcCausel.checked) { oopcCausedBy = "labor."; }
    if (oopcCausep.checked) { oopcCausedBy = "parts."; }
    stage += oopcsAuth1 + oopcAmt;
    stage += (document.getElementById("auth12").checked ? oopcsAuth2b : oopcsAuth2a) + "\r";
    stage += oopcsAuth2c + oopcCausedBy + "\r" + oopcsAuth3a + "\r";
    finishAuth(stage);
    return;
  }
}

function showOOPopt() {
  document.getElementById("OOPoptDiv").style.display = "inline-block";
}

function finishAuth(stage) {
  let noncovAuth1 = "Will inform Contract Holder of non-covered components";
  let noncovAuth2 = "There were denied items on this claim.\rReview denial note for more details";
  document.getElementById("OOPoptDiv").style.display = "none";
  let noncovComps = document.getElementById("auth18");
  if (noncovComps.checked) {
    stage += noncovAuth1 + "\r";
  }
  let deniedComps = document.getElementById("auth18a");
  if (deniedComps.checked) {
    stage += noncovAuth2;
  }
  copy(stage);
  let boxes = document.querySelectorAll(".FNA");
  for (let i = 0; i < boxes.length; i++) {
    boxes[i].checked = false;
  }
}

function EVACRECH(btnID) {
  let EvacRechrge = "Evac and Recharge\rRF Asking:   \rPD Approved:   1.4\r\r";
  let Check = localStorage.getItem(btnID + "EDIT");
  let textarea = document.getElementById("textarea2");
  if (Check == null) {
    textarea.value += EvacRechrge;
    document.getElementById("EDITarea").value = EvacRechrge;
  } else {
    textarea.value += Check;
    document.getElementById("EDITarea").value = Check;
  }
  textarea.scrollTop = textarea.scrollHeight;
}

function ALIGNMENT(btnID) {
  let Alignment = "Alignment\rRF Asking:   \rPD Approved:   \r\r";
  let Check = localStorage.getItem(btnID + "EDIT");
  let textarea = document.getElementById("textarea2");
  if (Check == null) {
   textarea.value += Alignment;
   document.getElementById("EDITarea").value = Alignment;
  } else {
    textarea.value += Check;
    document.getElementById("EDITarea").value = Check;
  }
  textarea.scrollTop = textarea.scrollHeight;
}

function DIAG() {
  let textarea = document.getElementById("textarea2");
  textarea.value += "Diag\rRF Asking:   \rPD Approved:   \r\r";
  textarea.scrollTop = textarea.scrollHeight;
}

function LABOR(boxNum) {
  let textarea = document.getElementById("textarea2");
  textarea.value += "R/R \rRF Asking:   \rPD Approved:   \r\r";
  textarea.scrollTop = textarea.scrollHeight;
}

function BULK(btnID) {
  let Check = localStorage.getItem(btnID + "EDIT");
  let textarea = document.getElementById("textarea2");
  if (Check == null) {
    textarea.value += "BULK:   \rRF Price:   \rFPS Allows:   \r\r";
    document.getElementById("EDITarea").value = "BULK:   \rRF Price:   \rFPS Allows:   \r\r";
  } else {
    textarea.value += Check;
    document.getElementById("EDITarea").value = Check;
  }
  textarea.scrollTop = textarea.scrollHeight;
}

function OEMOVER() {
  let textareaVal = document.getElementById("textarea2").value;
  let textarea = document.getElementById("textarea2");
  textareaVal = textareaVal.slice(0,-1);
  textarea.value = textareaVal;
  textarea.value += "PA PN:   \rPA List:   \rPA Cost:   \rCore: NA\r\r";
  textarea.scrollTop = textarea.scrollHeight;
}

function NEWAM() {
  let textarea = document.getElementById("textarea2");
  textarea.value += "RF AM PN:   \rRF Price:   \rPA PN:   \rPA List:   \rPA Cost:   \rCore: NA\r\r";
  textarea.scrollTop = textarea.scrollHeight;
}

function NEWOEM() {
  let textarea = document.getElementById("textarea2");
  textarea.value += "Verified OEM PN:   \rVerified MSRP:   \rRF Price:   \r\r";
  textarea.scrollTop = textarea.scrollHeight;
}

function REVIEW(btnID) {
  let Rev = "Reviewed photos sent by repair facility.\rVerified vin.\rVerified mileage.\rNo indication of commercial use.\rNo indication of modification.\r\r";
  let Check = localStorage.getItem(btnID + "EDIT");
  if (Check == null) {
    document.getElementById("textarea5").value = Rev;
    document.getElementById("EDITarea").value = Rev;
  } else {
    document.getElementById("textarea5").value = Check;
    document.getElementById("EDITarea").value = Check;
  }
  let outputString = document.getElementById("textarea5").value;
  copy(outputString);
  let mode = localStorage.getItem("mode");
  if(checkOpen()) {
    ShowTemps();
  }
}

function inspREVIEW() {
  let Rev = "Inspection Review\rReason for inspection:\rLabor rate:\rMileage:\rFluid condition:\rModifications/Collision/Commercial:\rInspector findings/photo review:";
  copy(Rev);
}

function carfaxREVIEW() {
  let Rev = "CARFAX Report Review:\r1.) What I was looking for:\r2.) Red flags or Mileage Discrepancy:\r3.) Does it relate to the claim:\r4.) What is needed now:";
  copy(Rev);
}

function RECREQ(btnID) {
  let RecReq = "Requesting Contract Holder statement regarding issues.\rRequesting past 12 months of service records from the Contract Holder.\rSent records request using SRS action button.\rWill call the Contract Holder to inform.";
  let Check = localStorage.getItem(btnID + "EDIT");
  if (Check == null) {
    document.getElementById("textarea5").value = RecReq;
    document.getElementById("EDITarea").value = RecReq;
  } else {
    document.getElementById("textarea5").value = Check;
    document.getElementById("EDITarea").value = Check;
  }
  let outputString = document.getElementById("textarea5").value;
  copy(outputString);
}

function NOANSREC(btnID) {
  let NoAns = "Called Contract Holder to request records.\rCalled Contract Holder to request statement.\rNo answer – left voicemail.\rTasked to CS callbacks.";
  let Check = localStorage.getItem(btnID + "EDIT");
  if (Check == null) {
    document.getElementById("textarea5").value = NoAns;
    document.getElementById("EDITarea").value = NoAns;
  } else {
    document.getElementById("textarea5").value = Check;
    document.getElementById("EDITarea").value = Check;
  }
  let outputString = document.getElementById("textarea5").value;
  copy(outputString);
}

function INSPTEMP(btnID) {
  let InsTemp = "Technician states:\r\rPart failure\rPart failure\rPart failure\r\rPlease have the technician demonstrate the failures listed above.\r\rNotate if rust, corrosion, or any outside influence is the cause of failure.\rNotate available fluid levels and conditions.\rFor electrical components, have technician verify power and ground.\r\rPlease take pictures of the following:\r";
  InsTemp += "All failures.\rAll 4 sides of vehicle, vin, and odometer.\rInspection stickers and oil change stickers.\rWheels, tires, and rotors.\rAny dash light that are on, current or history DTCs, and any freeze frame data available.\rAny signs of commercial use or modifications.\rAny rust, corrosion, or collision damage.\rAny other information relevant to the failures.\r\rIf the failure is related to drivability or verification is noise based, please provide video verification.\r\rPlease contact the Repair Facility 1-2 hours before arrival.\r\rContact Name:\rEmail:\rDirect Line:";
  let Check = localStorage.getItem(btnID + "EDIT");
  if (Check == null) {
    document.getElementById("textarea5").value = InsTemp;
    document.getElementById("EDITarea").value = InsTemp;
  } else {
    document.getElementById("textarea5").value = Check;
    document.getElementById("EDITarea").value = Check;
  }
  let outputString = document.getElementById("textarea5").value;
  copy(outputString);
  if(checkOpen()) {
    ShowTemps();
  }
}

function PTXFER() {
  let showTemp = document.getElementById("transferTemplate");
  showTemp.style.display = "inline-block";
  let rfEmail = getContact('1');
  let rfName = getContact('0');
  document.getElementById("contact1").value = rfName;
  document.getElementById("contact2").value = rfEmail;
  localStorage.setItem("PTpage", "1");
  document.getElementById("quest1").style.display = "block";
  if(checkOpen()) {
    ShowTemps();
  }
}

function ShowTemps() {
  let TPDiv = document.getElementById("TPDiv");
  let isOpen = checkOpen();
  if (TPDiv.style.display == "inline-block" || isOpen) {
    TPDiv.style.display = "none";
    return;
  }
  TPDiv.style.display = "inline-block";
}

function advancePT(radioId) {
  let page = parseInt(localStorage.getItem("PTpage"));
  let num = radioId.match(/(\d+)/);
  let single = num[0];
  let curId = "quest" + single;
  let nextIdnum = parseInt(single) + 1;
  let nextId = "quest" + nextIdnum;
  if (radioId == "no3" || radioId == "nr3") {
    document.getElementById("q3ansN").style.display = "block";
    document.getElementById("quest3").style.display = "none";
    return;
  }
  if (radioId == "done3") {
    document.getElementById("q3ansN").style.display = "none";
  }
  if (radioId == "yes11") {
    document.getElementById("q11ansY").style.display = "block";
    document.getElementById("quest11").style.display = "none";
    return;
  }
  if (radioId == "no11" || radioId == "done11") {
    document.getElementById("q11ansY").style.display = "none";
    submitTEMP();
    return;
  }
  localStorage.setItem("PTpage", nextIdnum);
  document.getElementById(curId).style.display = "none";
  document.getElementById(nextId).style.display = "block";
}

function backTEMP() {
  let page = localStorage.getItem("PTpage");
  if (page == "1") { return; }
  let curId = "quest" + page;
  let newpage = parseInt(page) - 1;
  let nextId = "quest" + newpage;
  localStorage.setItem("PTpage", newpage);
  document.getElementById("q3ansN").style.display = "none";
  document.getElementById("q11ansY").style.display = "none";
  document.getElementById(curId).style.display = "none";
  document.getElementById(nextId).style.display = "block";
}

function submitTEMP() {
  let PtTransfer1 = "Is the Repair Facility able to diagnose to cause of failure and overhaul if needed?   ";
  let PtTransfer2 = "Has the Repair Facility ever serviced the vehicle before?   ";
  let PtTransfer3 = "Can a test drive be performed if needed?   ";
  let PtTransfer4 = "Did the Repair Facility tow the vehicle?   ";
  let PtTransfer5 = "Has the cause of failure been identified?   ";
  let PtTransfer6 = "Does the Repair Facility have an itemized estimate available?   ";
  let PtTransfer7 = "Has the Repair Facility's info and contact info been verified?   ";
  let PtTransfer8 = "What is the preferred method of contact?   ";
  let PtTransfer9  = "Have the PT claim expectations been reviewed with the Repair Facility contact?   ";
  let PtTransfer10 = "Have you provided the Repair Facility with the assigned adjusters name, direct extension, and e-mail?   ";
  let PtTransfer11 = "Is there any other relevant info that will assist the adjuster?   ";
  let q1 = document.getElementsByName("ans1");
  let q2 = document.getElementsByName("ans2");
  let q3 = document.getElementsByName("ans3");
  let q4 = document.getElementsByName("ans4");
  let q5 = document.getElementsByName("ans5");
  let q6 = document.getElementsByName("ans6");
  let q7 = document.getElementsByName("ans7");
  let q8 = document.getElementsByName("ans8");
  let q9 = document.getElementsByName("ans9");
  let q10 = document.getElementsByName("ans10");
  let q11 = document.getElementsByName("ans11");
  let ans1, ans2, ans3, ans4, ans5, ans6, ans7, ans8, ans9, ans10, ans11;
  let checkedArr = [];
  for (i = 0; i < q1.length; i++) {
    if (q1[i].checked) {
      ans1 = q1[i].value;
      checkedArr.push(q1[i]);
    }
  }
  for (i = 0; i < q2.length; i++) {
    if (q2[i].checked) {
      ans2 = q2[i].value;
      checkedArr.push(q2[i]);
    }
  }
  for (i = 0; i < q3.length; i++) {
    if (q3[i].checked) {
      ans3 = q3[i].value;
      checkedArr.push(q3[i]);
    }
  }
  for (i = 0; i < q4.length; i++) {
    if (q4[i].checked) {
      ans4 = q4[i].value;
      checkedArr.push(q4[i]);
    }
  }
  for (i = 0; i < q5.length; i++) {
    if (q5[i].checked) {
      ans5 = q5[i].value;
      checkedArr.push(q5[i]);
    }
  }
  for (i = 0; i < q6.length; i++) {
    if (q6[i].checked) {
      ans6 = q6[i].value;
      checkedArr.push(q6[i]);
    }
  }
  for (i = 0; i < q7.length; i++) {
    if (q7[i].checked) {
      ans7 = q7[i].value;
      checkedArr.push(q7[i]);
    }
  }
  for (i = 0; i < q8.length; i++) {
    if (q8[i].checked) {
      ans8 = q8[i].value;
      checkedArr.push(q8[i]);
    }
  }
  for (i = 0; i < q9.length; i++) {
    if (q9[i].checked) {
      ans9 = q9[i].value;
      checkedArr.push(q9[i]);
    }
  }
  for (i = 0; i < q10.length; i++) {
    if (q10[i].checked) {
      ans10 = q10[i].value;
      checkedArr.push(q10[i]);
    }
  }
  for (i = 0; i < q11.length; i++) {
    if (q11[i].checked) {
      ans11 = q11[i].value;
      checkedArr.push(q11[i]);
    }
  }
  let q11ansExplain = document.getElementById("q11ansExplain").value;
  let q3ansExplain = document.getElementById("q3ansExplain").value;
  let contact1 = "Contact Name: " + document.getElementById("contact1").value;
  let contact2 = "Contact Info: " + document.getElementById("contact2").value;
  for (i = 0; i < checkedArr.length; i++) {
    checkedArr[i].checked = false;
  }
  document.getElementById("textarea5").value = PtTransfer1 + ans1 + "\r" +  PtTransfer2 + ans2 + "\r" + PtTransfer3 + ans3 + "\r";
  if (ans3 != "YES") {
    document.getElementById("textarea5").value += q3ansExplain + "\r";
  }
  document.getElementById("textarea5").value += PtTransfer4 + ans4 + "\r" +  PtTransfer5 + ans5 + "\r" +  PtTransfer6 + ans6 + "\r" +  PtTransfer7 + ans7 + "\r" +  PtTransfer8 + ans8 + "\r" + contact1 + "\r" + contact2 + "\r" + PtTransfer9 + ans9 + "\r" + PtTransfer10 + ans10 + "\r" + PtTransfer11 + ans11 + "\r";
  if (ans11 == "YES") {
    document.getElementById("textarea5").value += q11ansExplain;
  }
  let outputString = document.getElementById("textarea5").value;
  copy(outputString);
  document.getElementById("q3ansExplain").value = "";
  document.getElementById("q11ansExplain").value = "";
  document.getElementById("contact1").value = "";
  document.getElementById("contact2").value = "";
  let showTemp = document.getElementById("transferTemplate");
  showTemp.style.display = "none";
}

function cancelPT() {
  let showTemp = document.getElementById("transferTemplate");
  showTemp.style.display = "none";
  let questDivs = document.getElementsByClassName("ptQuest");
  for (const x of questDivs) {
    x.style.display = "none";
  }
  let questRadios = document.getElementsByClassName("ptRad");
  for (const x of questRadios) {
    x.checked = false;
  }
}

function PICREQ(btnID) {
  let PicReq = "Requesting photos from Repair Facility to verify failure and avoid inspection delay.\rInforming Repair Facility to include pics of all 4 corners of the vehicle, VIN plate, odometer, and pictures of the failure.\rSent request via SRS action button.";
  let Check = localStorage.getItem(btnID + "EDIT");
  if (Check == null) {
    document.getElementById("textarea5").value = PicReq;
   document.getElementById("EDITarea").value = PicReq;
  } else {
    document.getElementById("textarea5").value = Check;
   document.getElementById("EDITarea").value = Check;
  }
  let outputString = document.getElementById("textarea5").value;
  copy(outputString);
}

function FLUIDLEAK() {
  let fluids = document.getElementById("div6");
  if (fluids.style.display != "none") {
    fluids.style.display = "none";
    document.getElementById("fluid").textContent = "$";
  } else {
    fluids.style.display = "inline-block";
    document.getElementById("fluid").textContent = "X";
  }
}

function CopyIntakeForm(index) {
  let textarea = document.getElementById('textarea1');
  let lines = textarea.value.split('\n');
  let lineIndex = parseInt(index);
  let start = lines.slice(0, lineIndex).reduce((acc, curr) => acc + curr.length + 1, 0);
  let end = start + lines[lineIndex].length;
  textarea.focus();
  textarea.setSelectionRange(start, end);
  let tempStr = window.getSelection();
  document.getElementById("textarea4").value = tempStr;
  let fullString = document.getElementById("textarea4").value;
  let contactString = fullString.slice(9);
  document.getElementById("textarea4").value = contactString.trim();
  let outputString = document.getElementById("textarea4").value;
  copy(outputString);
}

function CopyForm(index){
  let textarea = document.getElementById(index);
  textarea.select();
  document.execCommand("copy");
}

function FormToTA() {
  let partname = document.getElementById('partname1').value;
  let partnum = document.getElementById('partnum').value;
  let rfprice = document.getElementById('rfprice').value;
  let msrp = document.getElementById('msrp').value;
  let textarea = document.getElementById("textarea2");
  if (msrp) {
    let overCheck = parseInt(msrp);
    textarea.value += "Part: ";
    textarea.value += partname + "\r";
    textarea.value += "Verified OEM PN: ";
    textarea.value += partnum + "\r";
    textarea.value += "Verified MSRP: ";
    textarea.value += msrp + "\r";
    textarea.value += "RF Price: ";
    textarea.value += rfprice + "\r";
    if (overCheck > 250) {
      textarea.value += "PA PN:   \rPA List:   \rPA Cost:   \rCore: NA\r\r";
      textarea.scrollTop = textarea.scrollHeight;
      } else {
        textarea.value += "\r";
        textarea.scrollTop = textarea.scrollHeight;
      }
  } else {
    textarea.value += "Part: ";
    textarea.value += partname + "\r";
    textarea.value += "RF AM PN:  ";
    textarea.value += partnum + "\r";
    textarea.value += "RF Price: ";
    textarea.value += rfprice + "\r";
    textarea.value += "PA PN:   \rPA List:   \rPA Cost:   \rCore: NA\r\r";
    textarea.scrollTop = textarea.scrollHeight;
  }
}

function AnotherOne() {
  let newpartcountStr = localStorage.getItem("newpartcount");
  let newpartcount = parseInt(newpartcountStr);
  if (newpartcount < 7){
    document.getElementById("partname" + newpartcount).style.display = "inline-block";
    newpartcount++;
    localStorage.setItem("newpartcount",newpartcount);
  }
}

function NextPart() {
  let newpartcountStr = localStorage.getItem("newpartcount");
  let newpartcount = parseInt(newpartcountStr);
  document.getElementById('partnum').value = "";
  document.getElementById('rfprice').value = "";
  document.getElementById('msrp').value = "";
  partMover = newpartcount - 1;
  for (let i = 1; i < partMover; i++) {
    let d = i + 1;
    let upper = document.getElementById("partname" + d);
    let lower = document.getElementById("partname" + i);
    lower.value = upper.value;
  }
  if (newpartcount > 2) {
    newpartcount = newpartcount - 1;
    document.getElementById("partname" + partMover).value = "";
    document.getElementById("partname" + partMover).style.display = "none";
    localStorage.setItem("newpartcount",newpartcount);
  }
}

function SENDLABOR1() {
  let Labor = "RF Asking:   \rPD Approved:   \r\r";
  let partname = document.getElementById('partname1').value;
  let textarea = document.getElementById("textarea2");
  textarea.value += "R/R ";
  textarea.value += partname + "\r";
  textarea.value += Labor;
  textarea.scrollTop = textarea.scrollHeight;
}

function SENDDIAG1() {
  let Labor = "RF Asking:   \rPD Approved:   \r\r";
  let partname = document.getElementById('partname1').value;
  let textarea = document.getElementById("textarea2");
  textarea.value += "Diag on ";
  textarea.value += partname + "\r";
  textarea.value += Labor;
  textarea.scrollTop = textarea.scrollHeight;
}

function ClearIntake() {
  document.getElementById("partname1").value = "";
  document.getElementById("partnum").value = "";
  document.getElementById("rfprice").value = "";
  document.getElementById("msrp").value = "";
}

function COPYNOTE() {
  let outputString = document.getElementById("textarea2").value;
  copy(outputString);
}

function toggleConductor(boxId) {
  let showNode = document.querySelectorAll('[class$="dispStat"]');
  let showList = Array.from(showNode);
  let checkBox = document.getElementById(boxId);
  if (boxId == "s9") {
    for (i = 0; i < showList.length; i++) {
      let affectedElem = showList[i];
      let affectedId = showList[i].id;
      if (checkBox.checked == true) {
        affectedElem.style.display = "inline-block";
        localStorage.setItem(affectedId + "SHOW", "inline-block");
        localStorage.setItem("allBTN", "inline-block");
      } else {
        affectedElem.style.display = "none";
        localStorage.setItem(affectedId + "SHOW", "none");
        localStorage.setItem("allBTN", "none");
      }
    }
  return;
  } else {
    let displayElemNode = document.getElementsByClassName(boxId + "dispStat");
    let affectedElem = displayElemNode[0];
    let affectedId = displayElemNode[0].id;
    if (checkBox.checked == true){
      affectedElem.style.display = "inline-block";
      localStorage.setItem(affectedId + "SHOW", "inline-block");
    } else {
      affectedElem.style.display = "none";
      localStorage.setItem(affectedId + "SHOW", "none");
    }
  }
}

window.onload = function PutItBack() {
  localStorage.setItem("viewNum", "normal");
  let selected = "holder1";
  let selectedElem = document.getElementById(selected);
  let didItRun = localStorage.getItem("Im The Boss");
  localStorage.setItem("toldem", "false");
  localStorage.setItem("menuOpen", "false");
  localStorage.setItem("newpartcount","2");
  localStorage.setItem("menuState", 0);
  localStorage.setItem("colorState", 0);
  if (didItRun == null) {
    localStorage.setItem("Im The Boss", "It's Been Done");
    localStorage.setItem(selected + "STCB", '0');
    localStorage.setItem(selected + "PRIN", '0');
    localStorage.setItem(selected + "LINK", '0');
    localStorage.setItem(selected + "ENDN", '0');
    localStorage.setItem(selected + "SOLO", '0');
    localStorage.setItem(selected + "Count", '0');
  }
  let but = localStorage.getItem(selected + "Count");
  let buttonCount = parseInt(but);
  for (i = 0; i < buttonCount; i++) {
    let count = i.toString();
    let currID = "cust" + count;
    let newID = localStorage.getItem(currID);
    let currdivID = "custBtn" + count;
    let buttonX = document.getElementById(currID)
    buttonX.id = newID;
  }
  for (i = 0; i < 10; i++) {
    let count = i.toString();
    let curdivID = "custBtn" + count;
    let thsDisp = localStorage.getItem(curdivID + "SHOW");
    if (thsDisp == null) {
      localStorage.setItem(curdivID + "SHOW", "none");
    }
  }
  let idNode = document.querySelectorAll('*[id]');
  let idList =  Array.from(idNode);
  for (i = 0; i < idList.length; i++) {
    let selectedID = idList[i].id;
    let selectedElem = document.getElementById(selectedID);
    if (localStorage.getItem(selectedID + "Font") != null) {
      let fSize = localStorage.getItem(selectedID + "Font");
      selectedElem.style.fontSize = fSize;
    }
    if (localStorage.getItem(selectedID + "top") != null) {
      let top = localStorage.getItem(selectedID + "top");
      let left = localStorage.getItem(selectedID + "left");
      selectedElem.style.left = left;
      selectedElem.style.top = top;
    }
    if (localStorage.getItem(selectedID + "Width") != null) {
      let setWidth = localStorage.getItem(selectedID + "Width");
      let setHeight = localStorage.getItem(selectedID + "Height");
      selectedElem.style.width = setWidth;
      selectedElem.style.height = setHeight;
    }
    if (localStorage.getItem(selectedID + "Display") != null) {
      let setTEXT = localStorage.getItem(selectedID + "Display");
      selectedElem.innerHTML = setTEXT;
    }
  }
  let showNode = document.querySelectorAll('[class$="dispStat"]');
  let showList = Array.from(showNode);
  for (i = 0; i < showList.length; i++) {
    let selectedID = showList[i].id;
    let selectedElem = document.getElementById(selectedID);
    let elemClass = selectedElem.className;
    let boxId = elemClass.substr(-10, 2);
    let checkBox = document.getElementById(boxId);
    let currDisp = selectedElem.style.display;
    let setDisp = localStorage.getItem(selectedID + "SHOW");
    if (setDisp == null || setDisp == "inline-block") {
      checkBox.checked = true;
      selectedElem.style.display = "inline-block";
    } else {
      checkBox.checked = false;
      selectedElem.style.display = "none";
    }
  }
  let mainDisp = localStorage.getItem("allBTN");
  let checkbox = document.getElementById("s9")
  if (mainDisp == "inline-block" || mainDisp == null) {
    checkbox.checked = true;
  } else {
    checkbox.checked = false;
  }
  localStorage.setItem("pageNum", "0");
  resetColors();
  trackerBlank();
  let Rev = "Reviewed inspection photos and report.\rReviewed photos sent by repair facility.\rVerified vin.\rVerified mileage.\rNo indication of commercial use.\rNo indication of modification.\r\r";
  localStorage.setItem("Rev", Rev);
  localStorage.setItem("mode", '2');
  modePT();
}

function trackerBlank() {
  const recordArr = [];
  localStorage.setItem("recordArr", JSON.stringify(recordArr));
  const objectArr = [];
  localStorage.setItem("objectArr", JSON.stringify(objectArr));
  localStorage.setItem("addLineCount", "0");
  localStorage.setItem("savedRecs", "0");
  localStorage.removeItem("serRcrdspot");
  localStorage.removeItem("incRcrdspot");
  localStorage.removeItem("rec0Rcrdspot");
  localStorage.removeItem("rec1Rcrdspot");
  localStorage.removeItem("rec2Rcrdspot");
  localStorage.removeItem("rec3Rcrdspot");
  localStorage.removeItem("rec4Rcrdspot");
  localStorage.removeItem("rec5Rcrdspot");
  localStorage.removeItem("InceptionMiles");
  localStorage.removeItem("InceptionDate");
  localStorage.removeItem("sermileage");
  localStorage.removeItem("serdate");
  localStorage.removeItem("rec0mileage");
  localStorage.removeItem("rec0date");
  localStorage.setItem("noteOpen", "false");
}

function openNav() {
  if (checkOpen()) { return; }
  document.getElementById("mySidenav").classList.add("open_nav");
}

function closeNav() {
  document.getElementById("mySidenav").classList.remove("open_nav");
}

function opentransAuth() {
  if (checkOpen()) { return; }
  document.getElementById("module_trans_backing").classList.add("trsnActive");
  document.getElementById("module_trans_1").classList.add("trsnActive");
}

function closetransAuth() {
  document.getElementById("module_trans_backing").classList.remove("trsnActive");
  document.getElementById("module_trans_7").classList.remove("trsnActive");
  document.getElementById("module_trans_4").classList.remove("trsnActive");
}

function closeUpdate() {
  document.getElementById("updated").style.display = "none";
  localStorage.setItem("updated", "yes");
}

function ringDeny() {
  let text = "After review of borescope provided photos, there are obvious signs of excessive carbon.\rThis carbon is a biproduct of a fuel/spark related issue.\r";
  text += "Per the leak-down test performed, we have air bypass from piston rings (air escaping to crank case).\rWe know the piston rings are stuck, and have made marks/scoring on the cylinder walls.\r";
  text += "The stuck piston rings can be attributed to the carbon.\rCarbon is an exclusion on this policy.\rThe engine portion of this claim will be denied.\r";
  text += "The following items and conditions are not covered by this CONTRACT:\r\r";
  text += "17. BREAKDOWNS resulting from engine sludge, carbon, pre-ignition, detonation, varnish, corrosion, foreign objects, dirt, dust, liquid, cracked rubber and/or neoprene parts, dry-rot, road chemicals, lack of proper fluids or use of additives or fuel grades not recommended by the manufacturer.";
  copy(text);
}//Restricted Use License
//
//This code is provided under the following terms and conditions:
//
//1. You are not allowed to use, copy, modify, merge, publish, distribute, sublicense, or sell copies of this code in any form, modified or unmodified, without express written permission from the author.
//
//2. You are not allowed to use this code for any illegal or unethical purpose.
//
//3. This license applies to all versions of the code previously released, as well as all future versions. Any prior statements made about permission given are hereby revoked.
//
//4. This code is provided "as is", without warranty of any kind, express or implied. The author shall not be liable for any damages arising from the use of this code.
//
//By using this code, you agree to abide by these terms and conditions. Failure to comply with these terms may result in legal action.
//
//For inquiries regarding licensing or permission to use this code in ways not covered by this license, please contact the author at AdjusterConsole@gmail.com.

function setButtonDisplay(buttonIds, displayStyle) {
  buttonIds.forEach(function(btnId) {
    document.getElementById(btnId).style.display = displayStyle;
  });
}

function setVMReason(reason) {
  localStorage.setItem("VMREASON", reason);
}

function showSnipAndUpdateEditArea(value) {
  document.getElementById("Snippings").value = value;
  document.getElementById("EDITarea").value = value;
}

function setLocalStorageItem(key, value) {
  localStorage.setItem(key, value);
}

function getElementValue(id) {
  return document.getElementById(id).value;
}

function setElementValue(buttonId, value) {
  buttonId.forEach(function(btnIds) {
    document.getElementById(btnIds).value = value;
  });
}

function commonFunctionality(btnID, defaultText) {
  var Check = localStorage.getItem(btnID + "EDIT") || defaultText;
  setElementValue(["Snippings", "EDITarea"], Check);
  copyText();
  setButtonDisplay(["Snippings"], "inline-block");
}

function TGAFO() {
  setButtonDisplay(["TGAFOABTN", "TGAFODBTN", "TGAFOCBTN", "NALVM", "NANVM"], "inline-block");
  setButtonDisplay(["TGAFOBTN", "TGAFSBTN", "TGAFBBTN"], "none");
  setVMReason("I called the Contract Holder to get authorization for the OOPC.\r");
}

function TGAFS() {
  setButtonDisplay(["TGAFSABTN", "TGAFSDBTN", "TGAFSCBTN", "NALVM", "NANVM"], "inline-block");
  setButtonDisplay(["TGAFOBTN", "TGAFSBTN", "TGAFBBTN"], "none");
  setVMReason("I called the Contract Holder to get authorization for shipping.\r");
}

function TGAFB() {
  changeVMpos();
  setButtonDisplay(["TGAFOSABTN", "TGAFOSDSBTN", "TGAFOSDBBTN", "TGAFOSCBTN", "NALVM", "NANVM"], "inline-block");
  setButtonDisplay(["TGAFOBTN", "TGAFSBTN", "TGAFBBTN"], "none");
  setVMReason("I called the Contract Holder to get authorization for the OOPC and shipping.\r");
}

function TGAFOA(btnID) {
  var defaultText = "I called the Contract Holder to get authorization for the OOPC.\rThe Contract Holder has approved the OOPC.\rI will call the Repair Facility to give authorization and payment info.\r";
  commonFunctionality(btnID, defaultText);
  common_hide();
  setVMpos();
}

function TGAFOD(btnID) {
  var defaultText = "I called the Contract Holder to get authorization for the OOPC.\rThe Contract Holder has declined repairs at this time.\r";
  commonFunctionality(btnID, defaultText);
  common_hide();
}

function TGAFOC(btnID) {
  var defaultText = "I called the Contract Holder to get authorization for the OOPC.\rThe Contract Holder will call back with a decision.\r";
  commonFunctionality(btnID, defaultText);
  common_hide();
}

function TGAFSA(btnID) {
  var defaultText = "I called the Contract Holder to get authorization for shipping.\rThe Contract Holder has approved shipping.\rI will call the Repair Facility to inform and order part.";
  commonFunctionality(btnID, defaultText);
  common_hide();
}

function TGAFSD(btnID) {
  var defaultText = "I called the Contract Holder to get authorization for shipping.\rThe Contract Holder has declined shipping and will use the Repair Facility parts.\rThe Contract Holder has agreed to the OOPC.\rI will call the Repair Facility to inform and give authorization.";
  commonFunctionality(btnID, defaultText);
  common_hide();
}

function TGAFSC(btnID) {
  var defaultText = "I called the Contract Holder to get authorization for shipping.\rThe Contract Holder will call back with a decision.\r";
  commonFunctionality(btnID, defaultText);
  common_hide();
}

function TGAFOSA(btnID) {
  var defaultText = "I called the Contract Holder to get authorization for the OOPC and shipping.\rThe Contract Holder has approved the OOPC and shipping.\rI will call Repair Facility to inform and order parts.\r";
  commonFunctionality(btnID, defaultText);
  common_hide();
}

function TGAFOSDS(btnID) {
  var defaultText = "I called the Contract Holder to get authorization for the OOPC and shipping.\rThe Contract Holder has declined shipping and will use the Repair Facility parts.\rThe Contract Holder has agreed to the OOPC.\rI will call Repair Facility to inform and give authorization.";
  commonFunctionality(btnID, defaultText);
  common_hide();
}

function TGAFOSDB(btnID) {
  var defaultText = "I called the Contract Holder to get authorization for the OOPC and shipping.\rThe Contract Holder has declined repairs at this time.\r";
  commonFunctionality(btnID, defaultText);
  common_hide();
}

function TGAFOSC(btnID) {
  var defaultText = "I called the Contract Holder to get authorization for the OOPC and shipping.\rThe Contract Holder will call back with a decision.\r";
  commonFunctionality(btnID, defaultText);
  common_hide();
}

async function copyText() {
  const notification = document.getElementById('copy-notification');
  let text = document.getElementById("Snippings").value;
  try {
    await navigator.clipboard.writeText(text);

    setTimeout(function(){ setButtonDisplay(["Snippings"], "none"); }, 5000);
      notification.style.top = '0';
      setTimeout(() => {
      notification.style.top = '-50px';
    }, 800);

  } catch (err) {
    console.error('Failed to copy text: ', err);
  }
}

async function copy(text) {
  const notification = document.getElementById('copy-notification');
  try {
    await navigator.clipboard.writeText(text);
    notification.style.top = '0';
    setTimeout(() => {
      notification.style.top = '-50px';
    }, 800);
  } catch (err) {
    console.error('Failed to copy text: ', err);
  }
}

function common_hide() {
  setButtonDisplay(["TGAFOSABTN", "TGAFOSDSBTN", "TGAFOSDBBTN", "TGAFOSCBTN", "TGAFOABTN", "TGAFODBTN", "TGAFOCBTN", "TGAFSABTN", "TGAFSDBTN", "TGAFSCBTN", "NALVM", "NANVM"], "none");
}

function TGAF(){
  if (checkOpen()) { return; }
  setElementValue(["Snippings"], "");
  setButtonDisplay(["TGAFBTN", "TGAFOBTN", "TGAFSBTN", "TGAFBBTN"], "inline-block");
  setButtonDisplay(["Snippings"], "none");
}

function setVMpos() {
  document.getElementById("NALVM").style.left = "270px";
  document.getElementById("NANVM").style.left = "270px";
}

function changeVMpos() {
  document.getElementById("NALVM").style.left = "400px";
  document.getElementById("NANVM").style.left = "400px";
}

function RFIB() {
  if (checkOpen()) { return; }
  setElementValue(["Snippings"], "");
  setButtonDisplay(["Snippings"], "none");
  setButtonDisplay(["RFIBDH", "PNLCBTN", "TOTALBTN", "RFAUTHBTN"], "inline-block");
}

function RFIBDH(){
  setButtonDisplay(["RFIBND", "RFIBNE", "RFIBNF", "RFIBNV"], "inline-block");
  setButtonDisplay(["RFIBDH", "PNLCBTN", "TOTALBTN", "RFAUTHBTN"], "none");
}

function RFIBND(btnID) {
  var defaultText = "A Repair Facility called in to start a claim.\rThe Repair Facility doesn't have a complete diagnostic.\rI advised the Repair Facility of the requirements to open a claim.\rThe Repair Facility understood and will call back when the diagnostic is complete.\r";
  commonFunctionality(btnID, defaultText);
  setButtonDisplay(["RFIBND", "RFIBNE", "RFIBNF", "RFIBNV"], "none");
}

function RFIBNE(btnID) {
  var defaultText = "A Repair Facility called in to start a claim.\rThe Repair Facility doesn't have an estimate ready.\rI advised the Repair Facility of the requirements to open a claim.\rThe Repair Facility understood and will call back with an estimate.\r";
  commonFunctionality(btnID, defaultText);
  setButtonDisplay(["RFIBND", "RFIBNE", "RFIBNF", "RFIBNV"], "none");
}

function RFIBNF(btnID) {
  var defaultText = "A Repair Facility called in to start a claim.\rThe Repair Facility doesn't have a verified cause of failure.\rI advised the Repair Facility of the requirements to open a claim.\rThe Repair Facility understood and will call back when they are ready.\r";
  commonFunctionality(btnID, defaultText);
  setButtonDisplay(["RFIBND", "RFIBNE", "RFIBNF", "RFIBNV"], "none");
}

function RFIBNV(btnID) {
  var defaultText = "A Repair Facility called in to start a claim.\rThe Contract Holder's vehicle is not at Repair Facility.\rI advised the Repair Facility of the requirements to open a claim.\rThe Repair Facility understood and will call back when the vehicle has returned.\r";
  commonFunctionality(btnID, defaultText);
  setButtonDisplay(["RFIBND", "RFIBNE", "RFIBNF", "RFIBNV"], "none");
}

function PNLC(btnID) {
  var defaultText = "A Repair Facility called in with the following concerns:\r\rI advised the Repair Facility that the parts were not listed for coverage - PNLC\rI will call the Contract Holder to inform of coverage.";
  commonFunctionality(btnID, defaultText);
  setButtonDisplay(["RFIBDH", "PNLCBTN", "TOTALBTN", "RFAUTHBTN"], "none");
}

function TOTAL(btnID) {
  var defaultText = "A Repair Facility called in to go over totals.\rI advised the Repair Facility of totals.\rThe Repair Facility understood.";
  commonFunctionality(btnID, defaultText);
  setButtonDisplay(["RFIBDH", "PNLCBTN", "TOTALBTN", "RFAUTHBTN"], "none");
}

function GAR(btnID) {
  var defaultText = "A Repair Facility called in to get authorization info.\rI verified the Contract Holder has authorized the OOPC via the notes.\rI gave the Repair Facility authorization and payment details.";
  commonFunctionality(btnID, defaultText);
  setButtonDisplay(["RFIBDH", "PNLCBTN", "TOTALBTN", "RFAUTHBTN"], "none");
}

function NAV() {
  setButtonDisplay(["Snippings"], "inline-block");
  setElementValue(["Snippings"], localStorage.getItem("VMREASON") + "There was no answer.\rI left a voicemail and tasked Customer Service to callback.\r");
  copyText();
  auth_Close();
  setVMpos();
}

function NAN() {
  setButtonDisplay(["Snippings"], "inline-block");
  setElementValue(["Snippings"], localStorage.getItem("VMREASON") + "There was no answer.\r There was no voicemail available\rI have tasked Customer Service to callback.\r");
  copyText();
  auth_Close();
  setVMpos();
}

function RESETNOTE() {
  setButtonDisplay(["RFIBBTN", "TGAFBTN"], "inline-block");
  setButtonDisplay(["RFIBDH", "PNLCBTN", "TOTALBTN", "RFAUTHBTN", "RFIBND", "RFIBNE", "RFIBNF", "RFIBNV", "Snippings"], "none");
  auth_Close();
  localStorage.removeItem("VMREASON");
  setElementValue(["Snippings"], "");
  setVMpos();
}

function auth_Close() {
  setButtonDisplay( [
  "TGAFOBTN",
  "TGAFSBTN",
  "TGAFBBTN",
  "TGAFOABTN",
  "TGAFODBTN",
  "TGAFOCBTN",
  "TGAFSABTN",
  "TGAFSDBTN",
  "TGAFSCBTN",
  "TGAFOSABTN",
  "TGAFOSDSBTN",
  "TGAFOSDBBTN",
  "TGAFOSCBTN",
  "NALVM", 
  "NANVM"],
  "none");
}

function BuilderShow() {
  var menuOpen = localStorage.getItem("menuOpen");
  var toggleMaster = document.getElementById("toggleMaster");
  var BtnBuilder = document.getElementById("BtnBuilder");
  if (toggleMaster.style.display == "none") {
    toggleMaster.style.display = "inline-block";
    BtnBuilder.innerText = "\u2666 Hide Toggle \u2666";
  } else {
    toggleMaster.style.display = "none";
    BtnBuilder.innerText = "\u2666 Toggle On/Off \u2666";
    if (menuOpen == 'true'){
      MENU();
    }
  }
}

document.addEventListener('contextmenu', function(e) {
  e.preventDefault();
  openNav();
});

document.onkeydown = function(e) {
  if (e.ctrlKey && e.altKey && e.shiftKey && e.which == 85) {
    document.getElementById('myInfo').style.display = "itnline-block";
  }
};

document.onkeyup = function(e) {
  if (e.ctrlKey && e.altKey && e.shiftKey && e.which == 85) {
    document.getElementById('myInfo').style.display = "none";
  }
};

function RESET() {
  localStorage.setItem("newpartcount","2");
  document.getElementById("textarea1").value = "CONTACT:   \rPAYMENT:   \rZIPCODE:   \rMILEAGE:   \rDISTANCE:   \rTIME:   ";
  setElementValue(["partname1","partname2","partname3","partname4", "partname5", "partname6", "partname7", "partnum", "rfprice", "msrp", "textarea2", "textarea3"], "");
  setButtonDisplay(["partname2", "partname3", "partname4", "partname5", "partname6", "partname7", "transferTemplate", "statNote", "newAuthstyle", "TPDiv"], "none");
  RESETNOTE();
  cancelState();
  cancelStat();
  cancelNewauth();
  cancelPT();
}

document.addEventListener('keydown', function(e) {
  if (e.key === 'Escape' || e.key === 'Esc') {
    whiteRabbit();
  }
});

function whiteRabbit() {
  closeResource2();
  closeResource();
  setZero();
  openScript('close');
  cancelState();
  cancelNewauth();
  cancelPT();
  closeNav();
  closeSOP();
  closePDFmenu();
  setButtonDisplay( [ 
    "transferTemplate", "statNote", "newAuthstyle", "TPDiv", "toggleMaster",
     "div6", "resrcDiv", "diagDiv", "laborscriptDiv" ], "none");
  RESETNOTE();
  localStorage.setItem("menuOpen", "true");
  MENU();
}

document.onkeyup = function(e) {
  if (e.ctrlKey && e.altKey && e.shiftKey && e.which == 80) {
    let mode = localStorage.getItem("mode");
  if (mode === '2') {
    localStorage.setItem('mode', '1');
    modePT();
    return;   
  } else {
    localStorage.setItem('mode', '2');
    modePT();
    return;
  }
 }
};

function modePT() {
  let mode = localStorage.getItem("mode");
  if (mode === '1') {
    document.getElementById("ITSBRITTNEY").style.display = "none";
    document.getElementById("openScript").style.display = "none";
    document.getElementById("PTModeDiv").style.display = "inline-block";
    document.getElementById("newAuthstarter").style.top = "230px";
    document.getElementById("newAuthstarter").style.left = "20px";
    document.getElementById("statusNote").style.left = "200px";
    document.getElementById("snipbox").style.left = "-135px";
    document.getElementById("snipbox").style.top = "325px";
    document.getElementById("SOPs").style.display = "none";
    document.getElementById("tools").style.display = "none";
    document.getElementById("T0").style.display = "none";
    document.getElementById("Request").style.left = "400px";
    document.getElementById("Request").style.top = "50px";
    return;
  } 
  if (mode === '2') {
    document.getElementById("ITSBRITTNEY").style.display = "inline-block";
    document.getElementById("openScript").style.display = "inline-block";
    document.getElementById("PTModeDiv").style.display = "none";
    document.getElementById("newAuthstarter").style.top = "";
    document.getElementById("newAuthstarter").style.left = "";
    document.getElementById("statusNote").style.left = "";
    document.getElementById("snipbox").style.left = "";
    document.getElementById("snipbox").style.top = "";
    document.getElementById("SOPs").style.display = "";
    document.getElementById("tools").style.display = "";
    document.getElementById("T0").style.display = "";
    document.getElementById("Request").style.left = "";
    document.getElementById("Request").style.top = "";
    return;
  }
 alert("You Broke It.");
}